%% This BibTeX bibliography file was created using BibDesk.
%% http://bibdesk.sourceforge.net/

%% Created for Chad Spensky at 2019-12-04 15:55:54 -0800 


%% Saved with string encoding Unicode (UTF-8) 


@string{acm-ccs = {Proceedings of the ACM Conference on Computer and Communications Security (CCS)}}

@string{acm-eurosys = {Proceedings of the ACM European Conference on Computer Systems (EuroSys)}}

@string{acm-fse = {Proceedings of the ACM SIGSOFT Symposium on Foundations of Software Engineering (FSE)}}

@string{acm-issta = {Proceedings of the International Symposium on Software Testing and Analysis (ISSTA)}}

@string{acm-kdd = {Proceedings of the ACM SIGKDD International Conference on Knowledge Discovery \& Data Mining}}

@string{acm-plas = {Proceedings of the ACM SIGPLAN Workshop on Programming Languages and Analysis for Security (PLAS)}}

@string{acm-pldi = {Proceedings of the ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI)}}

@string{acm-popl = {Proceedings of the ACM Symposium on Principles of Programming Languages (POPL)}}

@string{acm-sosp = {Proceedings of the ACM Symposium on Operating Systems Principles (SOSP)}}

@string{acm-tissec = {ACM Transactions on Information and System Security (TISSEC)}}

@string{acm-toplas = {ACM Transactions on Programming Languages and Systems (TOPLAS)}}

@string{acm-web = {ACM Transactions on the Web}}

@string{acm-worm = {Proceedings of the ACM Workshop on Recurring Malcode (WORM)}}

@string{acsac = {Proceedings of the Annual Computer Security Applications Conference (ACSAC)}}

@string{ase = {Proceedings of the IEEE/ACM International Conference on Automated Software Engineering (ASE)}}

@string{cacm = {Communications of the ACM}}

@string{dimva = {Proceedings of the Conference on Detection of Intrusions and Malware \& Vulnerability Assessment (DIMVA)}}

@string{esorics = {Proceedings of the European Symposium on Research in Computer Security (ESORICS)}}

@string{icse = {Proceedings of the International Conference on Software Engineering (ICSE)}}

@string{ieee-oakland = {Proceedings of the IEEE Symposium on Security and Privacy}}

@string{ieee-tse = {IEEE Transactions on Software Engineering}}

@string{isc = {Proceedings of the Information Security Conference (ISC)}}

@string{isoc-ndss = {Proceedings of the Symposium on Network and Distributed System Security (NDSS)}}

@string{raid = {Proceedings of the Symposium on Recent Advances in Intrusion Detection (RAID)}}

@string{spin = {Proceedings of the International SPIN Workshop on Model Checking of Software}}

@string{usenix-freenix = {Proceedings of the USENIX Annual Technical Conference, FREENIX Track}}

@string{usenix-hotbots = {Proceedings of the USENIX Workshop on Hot Topics in Understanding Botnet}}

@string{usenix-hotos = {Proceedings of the USENIX Workshop on Hot Topics in Operating Systems (HotOS)}}

@string{usenix-leet = {Proceedings of the USENIX Workshop on Large-Scale Exploits and Emergent Threats (LEET)}}

@string{usenix-lisa = {Proceedings of the Large Installation System Administration Conference (LISA)}}

@string{usenix-nsdi = {Proceedings of the USENIX Symposium on Networked Systems Design \& Implementation}}

@string{usenix-osdi = {Proceedings of the USENIX Symposium on Operating Systems Design and Implementation (OSDI)}}

@string{usenix-security = {Proceedings of the USENIX Security Symposium}}

@string{usenix-woot = {Proceedings of the USENIX Workshop on Offensive Technologies (WOOT)}}

@string{weis = {Proceedings of the Workshop on the Economics of Information Security (WEIS)}}

@string{www = {Proceedings of the International World Wide Web Conference (WWW)}}


@inproceedings{harrison2020partemu,
  title={PARTEMU: Enabling Dynamic Analysis of Real-World TrustZone Software Using Emulation},
  author={Harrison, Lee and Vijayakumar, Hayawardh and Padhye, Rohan and Sen, Koushik and Grace, Michael and Padhye, Rohan and Lemieux, Caroline and Sen, Koushik and Simon, Laurent and Vijayakumar, Hayawardh and others},
  booktitle={Proceedings of the 29th USENIX Security Symposium (USENIX Security)},
  year={2020}
}

@inproceedings{ispoglou2020fuzzgen,
  title={Fuzzgen: Automatic fuzzer generation},
  author={Ispoglou, Kyriakos and Austin, Daniel and Mohan, Vishwath and Payer, Mathias},
  booktitle={Proceedings of the 29th USENIX Security Symposium (USENIX Security)},
  pages={2271--2287},
  year={2020}
}

@inproceedings{machiry3c2022,
  title = {{C} to {Checked C} by {3C}},
  author = {Aravind Machiry and John Kastner and Matt McCutchen and Aaron Eline and Kyle Headley and Michael Hicks},
  booktitle = {Proceedings of the {ACM} Conference on Object-Oriented Programming Languages, Systems, and Applications (OOPSLA)},
  month = oct,
  year = 2022
}

@INPROCEEDINGS{8754426,
  author={Gu, Zuxing and Wu, Jiecheng and Liu, Jiaxiang and Zhou, Min and Gu, Ming},
  booktitle={2019 IEEE 43rd Annual Computer Software and Applications Conference (COMPSAC)}, 
  title={An Empirical Study on API-Misuse Bugs in Open-Source C Programs}, 
  year={2019},
  volume={1},
  number={},
  pages={11-20},
  doi={10.1109/COMPSAC.2019.00012}}
  
@inproceedings{gustafson2019toward,
	Author = {Gustafson, Eric and Muench, Marius and Spensky, Chad and Redini, Nilo and Machiry, Aravind and Fratantonio, Yanick and Balzarotti, Davide and Francillon, Aur{\'e}lien and Choe, Yung Ryn and Kruegel, Christophe and others},
	Booktitle = {Proceedings of the 22nd International Symposium on Research in Attacks, Intrusions and Defenses (RAID)},
	Date-Added = {2019-12-04 15:55:52 -0800},
	Date-Modified = {2019-12-04 15:55:52 -0800},
	Pages = {135--150},
	Title = {Toward the Analysis of Embedded Firmware through Automated Re-hosting},
	Year = {2019}}

@inproceedings{cerdeira2020sok,
  title={SoK: Understanding the Prevailing Security Vulnerabilities in TrustZone-assisted TEE Systems},
  author={Cerdeira, David and Santos, Nuno and Fonseca, Pedro and Pinto, Sandro},
  booktitle={Proceedings of the IEEE Symposium on Security and Privacy (S\&P)},
  pages={18--20},
  year={2020}
}

@misc{zimmer2016establishing,
  title={Establishing the root of trust},
  author={Zimmer, Vincent and Krau, Michael},
  year={2016},
  publisher={Agosto}
}

@inproceedings{leignac2019comparison,
  title={Comparison of side-channel leakage on Rich and Trusted Execution Environments},
  author={Leignac, Paul and Potin, Olivier and Rigaud, Jean-Baptiste and Dutertre, Jean-Max and Ponti{\'e}, Simon},
  booktitle={Proceedings of the Sixth Workshop on Cryptography and Security in Computing Systems},
  pages={19--22},
  year={2019}
}

@inproceedings{wang2020cache,
  title={Cache-in-the-Middle (CITM) Attacks: Manipulating Sensitive Data in Isolated Execution Environments},
  author={Wang, Jie and Sun, Kun and Lei, Lingguang and Wan, Shengye and Wang, Yuewu and Jing, Jiwu},
  booktitle={Proceedings of the ACM SIGSAC Conference on Computer and Communications Security (CCS)},
  pages={1001--1015},
  year={2020}
}

@inproceedings{sun2015trustotp,
	Author = {Sun, He and Sun, Kun and Wang, Yuewu and Jing, Jiwu},
	Booktitle = {Proceedings of the  ACM SIGSAC Conference on Computer and Communications Security (CCS)},
	Date-Added = {2019-11-11 15:09:10 -0800},
	Date-Modified = {2019-11-11 15:09:10 -0800},
	Organization = {ACM},
	Pages = {976--988},
	Title = {TrustOTP: Transforming smartphones into secure one-time password tokens},
	Year = {2015}}

@book{liang1999java,
	Author = {Liang, Sheng},
	Publisher = {Addison-Wesley Professional},
	Title = {The Java Native Interface: Programmer's Guide and Specification},
	Year = {1999}}

@book{rubini2001linux,
	Author = {Rubini, Alessandro and Corbet, Jonathan},
	Publisher = {" O'Reilly Media, Inc."},
	Title = {Linux device drivers},
	Year = {2001}}

@inproceedings{klees2018evaluating,
	Author = {Klees, George and Ruef, Andrew and Cooper, Benji and Wei, Shiyi and Hicks, Michael},
	Booktitle = {Proceedings of the  ACM SIGSAC Conference on Computer and Communications Security (CCS)},
	Organization = {ACM},
	Pages = {2123--2138},
	Title = {Evaluating fuzz testing},
	Year = {2018}}

@inproceedings{ning2014samsung,
	Author = {Ning, Peng},
	Booktitle = {Proceedings of the ACM Workshop on Security and Privacy in Smartphones \& Mobile Devices},
	Organization = {ACM},
	Pages = {1--1},
	Title = {Samsung knox and enterprise mobile security},
	Year = {2014}}

@inproceedings{machiry2013dynodroid,
	Author = {Machiry, Aravind and Tahiliani, Rohan and Naik, Mayur},
	Booktitle = {Proceedings of the  9th Joint Meeting on Foundations of Software Engineering},
	Organization = {ACM},
	Pages = {224--234},
	Title = {Dynodroid: An input generation system for android apps},
	Year = {2013}}

@article{schreiber2011android,
	Author = {Schreiber, Thorsten},
	Journal = {A shorter, more general work, but good for an overview of Binder. http://www. nds. rub. de/media/attachments/files/2012/03/binder. pdf},
	Title = {Android binder},
	Year = {2011}}

@inproceedings{afonso2016going,
	Author = {Afonso, Vitor and Bianchi, Antonio and Fratantonio, Yanick and Doup{\'e}, Adam and Polino, Mario and de Geus, Paulo and Kruegel, Christopher and Vigna, Giovanni},
	Booktitle = {Proceedings of the  Network and Distributed System Security Symposium (NDSS)},
	Pages = {1--15},
	Title = {Going native: Using a large-scale analysis of android apps to create a practical native-code sandboxing policy},
	Year = {2016}}

@article{lee2011tie,
	Author = {Lee, JongHyup and Avgerinos, Thanassis and Brumley, David},
	Publisher = {Internet Society},
	Title = {TIE: Principled reverse engineering of types in binary programs},
	Year = {2011}}

@inproceedings{Noonan:2016:PTI:2908080.2908119,
	Acmid = {2908119},
	Address = {New York, NY, USA},
	Author = {Noonan, Matt and Loginov, Alexey and Cok, David},
	Booktitle = {Proceedings of the  ACM SIGPLAN Conference on Programming Language Design and Implementation},
	Doi = {10.1145/2908080.2908119},
	Isbn = {978-1-4503-4261-2},
	Keywords = {Binary Analysis, Polymorphism, Pushdown Automata, Reverse Engineering, Static Analyiss, Type Systems},
	Location = {Santa Barbara, CA, USA},
	Numpages = {15},
	Pages = {27--41},
	Publisher = {ACM},
	Series = {PLDI '16},
	Title = {Polymorphic Type Inference for Machine Code},
	Url = {http://doi.acm.org/10.1145/2908080.2908119},
	Year = {2016},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/2908080.2908119},
	Bdsk-Url-2 = {https://doi.org/10.1145/2908080.2908119}}

@inproceedings{Wei:2018:JPE:3243734.3243835,
	Acmid = {3243835},
	Address = {New York, NY, USA},
	Author = {Wei, Fengguo and Lin, Xingwei and Ou, Xinming and Chen, Ting and Zhang, Xiaosong},
	Booktitle = {Proceedings of the  ACM SIGSAC Conference on Computer and Communications Security (CCS)},
	Doi = {10.1145/3243734.3243835},
	Isbn = {978-1-4503-5693-0},
	Keywords = {mobile security, static analysis},
	Location = {Toronto, Canada},
	Numpages = {14},
	Pages = {1137--1150},
	Publisher = {ACM},
	Series = {CCS '18},
	Title = {JN-SAF: Precise and Efficient NDK/JNI-aware Inter-language Static Analysis Framework for Security Vetting of Android Applications with Native Code},
	Url = {http://doi.acm.org/10.1145/3243734.3243835},
	Year = {2018},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/3243734.3243835},
	Bdsk-Url-2 = {https://doi.org/10.1145/3243734.3243835}}

@misc{keymastergenkey,
	Author = {Machiry},
	Date-Added = {2016-07-18 13:07:35 +0000},
	Date-Modified = {2015-05-20 13:07:35 +0000},
	Howpublished = {\url{https://github.com/ucsb-seclab/boomerang/blob/master/exploits/keymaster_kernel_leak/leak_kernel_page.c:L112}},
	Keywords = {qsee, keymaster, exploit},
	Title = {{Keymaster Generate Keypair in QSEE}}}

@misc{opteetossessout,
	Author = {STMicroelectronics and Linaro Security Working Group},
	Date-Added = {2016-07-18 13:07:35 +0000},
	Date-Modified = {2015-05-20 13:07:35 +0000},
	Howpublished = {\url{https://github.com/OP-TEE/optee_os/blob/master/core/kernel/tee_ta_manager.c:L474}},
	Keywords = {optee, trustzone, tee},
	Title = {{OP-TEE Secure world session out-of-memory}}}

@techreport{mcnally2012fuzzing,
	Author = {McNally, Richard and Yiu, Ken and Grove, Duncan and Gerhardy, Damien},
	Institution = {DEFENCE SCIENCE AND TECHNOLOGY ORGANISATION EDINBURGH (AUSTRALIA)},
	Title = {Fuzzing: the state of the art},
	Year = {2012}}

@inproceedings{chandra2014mobile,
	Author = {Chandra, Vikas and Aitken, Rob},
	Booktitle = {Proceedings of the IEEE Hot Chips 26 Symposium (HCS)},
	Organization = {IEEE},
	Pages = {1--40},
	Title = {Mobile hardware security},
	Year = {2014}}

@misc{trustonic-main,
	Author = {Trustonic},
	Date-Added = {2016-02-15 21:24:06 +0000},
	Date-Modified = {2016-02-15 21:24:06 +0000},
	Howpublished = {\url{https://www.trustonic.com/}},
	Keywords = {tee, trusted authority, trustonic},
	Title = {Trustonic}}

@misc{grohoski2010enabling,
	Author = {Grohoski, Gregory F and Olson, Christopher H and Ziaja, Thomas Alan and Spracklen, Lawrence A},
	Month = sep # {~14},
	Note = {US Patent 7,795,899},
	Publisher = {Google Patents},
	Title = {Enabling on-chip features via efuses},
	Year = {2010}}

@misc{armsecuremonitor,
	Author = {ARM Limited},
	Note = {\url{https://www.arm.com/why-arm/technologies/trustzone-for-cortex-a/tee-and-smc}},
	Title = {Development of TEE and Secure Monitor Code},
	Year = {2020}}

@misc{huaweisecurity,
	Author = {Huawei Technologies},
	Note = {\url{https://consumer-img.huawei.com/content/dam/huawei-cbg-site/en/mkt/legal/privacy-policy/EMUI 8.0 Security Technology White Paper.pdf}},
	Title = {EMUI 8.0 Security Technical White Paper},
	Year = {2017}}

@misc{opteeweb,
	Author = {Linaro Limited},
	Note = {\url{https://www.op-tee.org/}},
	Title = {Open Portable Trusted Execution Environment},
	Year = {2020}}

@misc{samsungtrustonic,
	Author = {Samsung},
	Note = {\url{https://news.samsung.com/global/samsung-and-trustonic-launch-trustonic-for-knox-delivering-a-whole-new-level-of-trust-enhanced-experiences-on-samsung-mobile-devices}},
	Title = {Trustonic for KNOX},
	Year = {2015}}

@misc{samsungteegris,
	Author = {Samsung},
	Note = {\url{https://developer.samsung.com/teegris/overview.html}},
	Title = {Samsung TEEGRIS},
	Year = {2020}}

@misc{androidasynctask,
	Author = {Google},
	Note = {\url{https://developer.android.com/reference/android/os/AsyncTask}},
	Title = {Android Async Task},
	Year = {2018}}

@misc{androidkeymas,
	Author = {Google},
	Note = {\url{https://android.googlesource.com/platform/hardware/libhardware/+/master/include/hardware/keymaster1.h}},
	Title = {Android Keymaster Struct},
	Year = {2018}}

@misc{fridare,
	Author = {@oleavr},
	Note = {\url{https://frida.re/}},
	Title = {Frida},
	Year = {2020}}

@misc{androidhwbacked,
	Author = {Google},
	Note = {\url{https://source.android.com/security/keystore}},
	Title = {Android Keystore},
	Year = {2018}}

@misc{androidhidl,
	Author = {Google},
	Note = {\url{https://source.android.com/devices/architecture/hidl}},
	Title = {Android HIDL},
	Year = {2018}}

@misc{androidhal,
	Author = {Google},
	Note = {\url{https://source.android.com/devices/architecture/hal}},
	Title = {Android HAL},
	Year = {2018}}

@misc{armtzref,
	Author = {ARM},
	Note = {\url{https://www.arm.com/why-arm/technologies/trustzone-for-cortex-a/tee-reference-documentation}},
	Title = {TEE Reference Documentation},
	Year = {2018}}

@misc{mobileap,
	Author = {Tech Target},
	Note = {\url{https://searchmobilecomputing.techtarget.com/definition/mobile-application-processor}},
	Title = {Mobile Application Processor},
	Year = {2011}}

@misc{androidsecbull,
	Author = {Google},
	Note = {\url{https://source.android.com/security/bulletin}},
	Title = {Android Security Bulletins},
	Year = {2018}}

@inproceedings{cova2006static,
	Author = {Cova, Marco and Felmetsger, Viktoria and Banks, Greg and Vigna, Giovanni},
	Booktitle = {Proceedings of the Computer Security Applications Conference (ACSAC)},
	Organization = {IEEE},
	Pages = {269--278},
	Title = {Static detection of vulnerabilities in x86 executables},
	Year = {2006}}

@inproceedings{shoshitaishvili2016sok,
	Author = {Shoshitaishvili, Yan and Wang, Ruoyu and Salls, Christopher and Stephens, Nick and Polino, Mario and Dutcher, Andrew and Grosen, John and Feng, Siji and Hauser, Christophe and Kruegel, Christopher and others},
	Booktitle = {Proceedings of the IEEE Symposium on Security and Privacy (S\&P)},
	Organization = {IEEE},
	Pages = {138--157},
	Title = {Sok:(state of) the art of war: Offensive techniques in binary analysis},
	Year = {2016}}

@inproceedings{wang2009intscope,
	Author = {Wang, Tielei and Wei, Tao and Lin, Zhiqiang and Zou, Wei},
	Booktitle = {Proceedings of the  Network and Distributed System Security Symposium (NDSS)},
	Organization = {Citeseer},
	Title = {IntScope: Automatically Detecting Integer Overflow Vulnerability in X86 Binary Using Symbolic Execution.},
	Year = {2009}}

@inproceedings{kruegel2005automating,
	Author = {Kruegel, Christopher and Kirda, Engin and Mutz, Darren and Robertson, William and Vigna, Giovanni},
	Booktitle = {Proceedings of the  USENIX Security Symposium (USENIX Security)},
	Organization = {USENIX Association},
	Pages = {11--11},
	Title = {Automating mimicry attacks using static binary analysis},
	Year = {2005}}

@inproceedings{cha2012unleashing,
	Author = {Cha, Sang Kil and Avgerinos, Thanassis and Rebert, Alexandre and Brumley, David},
	Booktitle = {Proceedings of the IEEE Symposium on Security and Privacy (S\&P)},
	Organization = {IEEE},
	Pages = {380--394},
	Title = {Unleashing mayhem on binary code},
	Year = {2012}}

@inproceedings{rawat2012finding,
	Author = {Rawat, Sanjay and Mounier, Laurent},
	Booktitle = {Proceedings of the Software Security and Reliability (SERE)},
	Organization = {IEEE},
	Pages = {177--186},
	Title = {Finding buffer overflow inducing loops in binary executables},
	Year = {2012}}

@inproceedings{redini2017bootstomp,
	Author = {Redini, Nilo and Machiry, Aravind and Das, Dipanjan and Fratantonio, Yanick and Bianchi, Antonio and Gustafson, Eric and Shoshitaishvili, Yan and Kruegel, Christopher and Vigna, Giovanni},
	Booktitle = {Proceedings of the  USENIX Security Symposium (USENIX Security)},
	Title = {Bootstomp: on the security of bootloaders in mobile devices},
	Year = {2017}}

@inproceedings{guan2017trustshadow,
	Author = {Guan, Le and Liu, Peng and Xing, Xinyu and Ge, Xinyang and Zhang, Shengzhi and Yu, Meng and Jaeger, Trent},
	Booktitle = {Proceedings of the 15th Annual International Conference on Mobile Systems, Applications, and Services},
	Organization = {ACM},
	Pages = {488--501},
	Title = {TrustShadow: Secure execution of unmodified applications with ARM trustzone},
	Year = {2017}}

@inproceedings{ngabonziza2016trustzone,
	Author = {Ngabonziza, Bernard and Martin, Daniel and Bailey, Anna and Cho, Haehyun and Martin, Sarah},
	Booktitle = {Proceedings of the  Collaboration and Internet Computing (CIC)},
	Organization = {IEEE},
	Pages = {445--451},
	Title = {Trustzone explained: Architectural features and use cases},
	Year = {2016}}

@article{jang2018privatezone,
	Author = {Jang, Jinsoo and Choi, Changho and Lee, Jaehyuk and Kwak, Nohyun and Lee, Seongman and Choi, Yeseul and Kang, Brent Byunghoon},
	Journal = {IEEE Transactions on Dependable and Secure Computing},
	Number = {5},
	Pages = {797--810},
	Publisher = {IEEE},
	Title = {Privatezone: Providing a private execution environment using arm trustzone},
	Volume = {15},
	Year = {2018}}

@inproceedings{feng2014secure,
	Author = {Feng, Tao and DeSalvo, Nicholas and Xu, Lei and Zhao, Xi and Wang, Xi and Shi, Weidong},
	Booktitle = {Proceedings of the  Mobile Computing, Applications and Services (MobiCASE)},
	Organization = {IEEE},
	Pages = {206--215},
	Title = {Secure session on mobile: An exploration on combining biometric, trustzone, and user behavior},
	Year = {2014}}

@inproceedings{yalew2017t2droid,
	Author = {Yalew, Sileshi Demesie and Maguire, Gerald Q and Haridi, Seif and Correia, Miguel},
	Booktitle = {Proceedings of the  Trustcom/BigDataSE/ICESS},
	Organization = {IEEE},
	Pages = {240--247},
	Title = {T2Droid: A TrustZone-based dynamic analyser for Android applications},
	Year = {2017}}

@techreport{zhang2014trustfa,
	Author = {Zhang, Dongli},
	Institution = {Technical Report},
	Title = {TrustFA: TrustZone-Assisted Facial Authentication on Smartphone},
	Year = {2014}}

@article{she2018neuzz,
	Author = {She, Dongdong and Pei, Kexin and Epstein, Dave and Yang, Junfeng and Ray, Baishakhi and Jana, Suman},
	Journal = {machine learning},
	Number = {46},
	Pages = {38},
	Title = {NEUZZ: Efficient Fuzzing with Neural Program Smoothing},
	Volume = {89},
	Year = {2018}}

@misc{applesecurtity,
	Author = {Apple},
	Note = {\url{https://www.apple.com/business/site/docs/iOS_Security_Guide.pdf}},
	Title = {iOS Security},
	Year = {2018}}

@misc{samsungtz,
	Author = {Samsung},
	Note = {\url{https://www.samsung.com/global/galaxy/what-is/trust-zone/}},
	Title = {What is Samsung TrustZone},
	Year = {2018}}

@misc{armtzexplained,
	Author = {Quarks Lab},
	Note = {\url{https://blog.quarkslab.com/introduction-to-trusted-execution-environment-arms-trustzone.html}},
	Title = {Introduction to Trusted Execution Environment: ARM's TrustZone},
	Year = {2018}}

@misc{qssecboot2019quarkslab,
	Author = {Quarks Lab},
	Note = {\url{https://blog.quarkslab.com/analysis-of-qualcomm-secure-boot-chains.html}},
	Title = {Analysis of Qualcomm Secure Boot Chains},
	Year = {2019},
        note={Accessed: 2021-02-01}
}

@misc{drmsecuritylevel2021google,
	Author = {Google},
	Note = {\url{https://support.google.com/widevine/answer/6072714?hl=en}},
	Title = {How to determine if Android device is security Level 1 or Level 3},
	Year = {2021},
        note={Accessed: 2021-01-05}
}


@article{wolf2008multiprocessor,
	Author = {Wolf, Wayne and Jerraya, Ahmed Amine and Martin, Grant},
	Journal = {IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems},
	Number = {10},
	Pages = {1701--1713},
	Publisher = {IEEE},
	Title = {Multiprocessor system-on-chip (MPSoC) technology},
	Volume = {27},
	Year = {2008}}

@inproceedings{zhao2014providing,
	Author = {Zhao, Shijun and Zhang, Qianying and Hu, Guangyao and Qin, Yu and Feng, Dengguo},
	Booktitle = {Proceedings of the 4th International Workshop on Trustworthy Embedded Devices},
	Organization = {ACM},
	Pages = {25--36},
	Title = {Providing root of trust for arm trustzone using on-chip sram},
	Year = {2014}}

@inproceedings{ekberg2013trusted,
	Author = {Ekberg, Jan-Erik and Kostiainen, Kari and Asokan, N},
	Booktitle = {Proceedings of the  ACM SIGSAC conference on Computer \& communications security (CCS)},
	Organization = {ACM},
	Pages = {1497--1498},
	Title = {Trusted execution environments on mobile devices},
	Year = {2013}}

@inproceedings{winter2012experimenting,
	Author = {Winter, Johannes},
	Booktitle = {Proceedings of the  Trust, Security and Privacy in Computing and Communications (TrustCom)},
	Organization = {IEEE},
	Pages = {1161--1166},
	Title = {Experimenting with ARM TrustZone--Or: How I Met Friendly Piece of Trusted Hardware},
	Year = {2012}}

@misc{androiddrm,
	Author = {Google},
	Note = {\url{https://source.android.com/devices/drm}},
	Title = {DRM},
	Year = {2001}}

@misc{smartphonetee,
	Author = {Google Project Zero},
	Note = {\url{https://googleprojectzero.blogspot.com/2017/07/trust-issues-exploiting-trustzone-tees.html}},
	Title = {Trust Issues: Exploiting TrustZone TEEs},
	Year = {2018}}

@misc{cve-2016-8764,
  	title={CVE-2016-8764},
	author={NIST},
	howpublished={\url{https://nvd.nist.gov/vuln/detail/CVE-2016-8764}},
	year={2017},
        note={Accessed: 2019-08-28}
}

@misc{androidkernelvulns,
	Author = {CVE},
	Note = {\url{https://www.cvedetails.com/vulnerability-list/vendor_id-1224/product_id-19997/Google-Android.html}},
	Title = {Google Android Security Vulnerabilities},
	Year = {2018}}

@misc{androidkernelexploits1,
	Author = {SecWiki},
	Note = {\url{https://github.com/SecWiki/android-kernel-exploits}},
	Title = {Android Kernel Exploits},
	Year = {2018}}

@misc{androidkernelexploits2,
	Author = {xairy},
	Note = {\url{https://github.com/xairy/kernel-exploits}},
	Title = {kernel exploits},
	Year = {2018}}

@misc{googleplaybill,
	Author = {Google},
	Note = {\url{https://developer.android.com/google/play/billing/billing_overview}},
	Title = {Google Play Billing Overview},
	Year = {2001}}

@article{rajpal2017not,
	Author = {Rajpal, Mohit and Blum, William and Singh, Rishabh},
	Journal = {arXiv preprint arXiv:1711.04596},
	Title = {Not all bytes are equal: Neural byte sieve for fuzzing},
	Year = {2017}}

@inproceedings{xu2017designing,
	Author = {Xu, Wen and Kashyap, Sanidhya and Min, Changwoo and Kim, Taesoo},
	Booktitle = {Proceedings of the  ACM SIGSAC Conference on Computer and Communications Security (CCS)},
	Organization = {ACM},
	Pages = {2313--2328},
	Title = {Designing New Operating Primitives to Improve Fuzzing Performance},
	Year = {2017}}

@article{nagy2018full,
	Author = {Nagy, Stefan and Hicks, Matthew},
	Journal = {arXiv preprint arXiv:1812.11875},
	Title = {Full-speed Fuzzing: Reducing Fuzzing Overhead through Coverage-guided Tracing},
	Year = {2018}}

@misc{opteesmcdriver,
	Author = {STMicroelectronics and Linaro Security Working Group},
	Date-Added = {2016-07-18 13:07:35 +0000},
	Date-Modified = {2015-05-20 13:07:35 +0000},
	Howpublished = {\url{https://github.com/linaro-swg/linux/blob/optee/drivers/tee}},
	Keywords = {optee, trustzone, tee},
	Title = {{OP-TEE non-secure world-secure world driver}}}

@misc{qseedriver,
	Date-Added = {2016-08-16 03:53:48 +0000},
	Date-Modified = {2016-08-16 03:54:47 +0000},
	Howpublished = {\url{https://android.googlesource.com/kernel/msm.git/+/77cac325253126dd9e6c480d885aa51f1abf3c40/drivers/misc/qseecom.c}},
	Keywords = {qsee, trustzone},
	Organization = {Qualcomm},
	Title = {{QSEECOM Driver}}}

@misc{qseedriverreqsize,
	Date-Added = {2016-08-16 03:53:48 +0000},
	Date-Modified = {2016-08-16 03:54:47 +0000},
	Howpublished = {\url{https://android.googlesource.com/kernel/msm.git/+/77cac325253126dd9e6c480d885aa51f1abf3c40/drivers/misc/qseecom.c#97}},
	Keywords = {qsee, trustzone},
	Organization = {Qualcomm},
	Title = {{QSEE Request and Response Sizes}}}

@misc{huaweitzdriver,
	Date-Added = {2016-08-16 03:53:48 +0000},
	Date-Modified = {2016-08-16 03:54:47 +0000},
	Howpublished = {\url{https://github.com/OpenKirin/android_kernel_huawei_hi3650/tree/7.x/drivers/hisi/tzdriver}},
	Keywords = {qsee, trustzone},
	Organization = {Huawei},
	Title = {{Huawei Trusted Core Kernel Driver}}}

@misc{posix_ioctl,
	Author = {The Open Group},
	Note = {\url{http://pubs.opengroup.org/onlinepubs/009695399/functions/ioctl.html}},
	Title = {ioctl - POSIX Standard},
	Year = {2001}}

@misc{syzkaller,
	Author = {Google},
	Note = {\url{https://github.com/google/syzkaller}},
	Title = {syzkaller - linux syscall fuzzer},
	Year = {2017}}

@inproceedings{chuang1998non,
	Author = {Chuang, Tyng Ruey and Kuo, YS and Wang, Chien-Min},
	Booktitle = {Proceedings of the 20th international conference on Software engineering},
	Organization = {IEEE},
	Pages = {312--321},
	Title = {Non-intrusive object introspection in C++: Architecture and application},
	Year = {1998}}

@misc{bitsplease,
	Author = {{laginimaineb}},
	Note = {\url{http://bits-please.blogspot.com/2016/04/exploring-qualcomms-secure-execution.html}},
	Title = {Exploring Qualcomms Secure Execution Environment},
	Year = {2016}}

@misc{typeconfusbug,
	Author = {{Nick Stephens}},
	Note = {\url{https://www.slideshare.net/GeekPwnKeen/nick-stephenshow-does-someone-unlock-your-phone-with-nose}},
	Title = {how does someone unlock your phone with nose},
	Year = {2017}}

@misc{qseebug,
	Author = {{laginimaineb}},
	Note = {\url{https://bits-please.blogspot.com/2016/05/qsee-privilege-escalation-vulnerability.html}},
	Title = {QSEE privilege escalation vulnerability and exploit (CVE-2015-6639)},
	Year = {2016}}

@misc{huaweiisencrypted,
	Author = {{XePeleato}},
	Note = {\url{https://github.com/OpenKirin/Documentation/blob/master/04-Trustzone.md}},
	Title = {Huawei Kirin TrustZone},
	Year = {2017}}

@inproceedings{han2017imf,
	Author = {Han, HyungSeok and Cha, Sang Kil},
	Booktitle = {Proceedings of the  ACM SIGSAC Conference on Computer and Communications Security (CCS)},
	Organization = {ACM},
	Pages = {2345--2358},
	Title = {IMF: Inferred Model-based Fuzzer},
	Year = {2017}}

@inproceedings{jeong2018razzer,
	Author = {Jeong, Dae R and Kim, Kyungtae and Shivakumar, Basavesh and Lee, Byoungyoung and Shin, Insik},
	Booktitle = {Proceedings of the  IEEE Symposium on Security and Privacy (S\&P)},
	Organization = {IEEE},
	Pages = {0},
	Title = {Razzer: Finding Kernel Race Bugs through Fuzzing},
	Year = {2018}}

@inproceedings{corina2017difuze,
	Author = {Corina, Jake and Machiry, Aravind and Salls, Christopher and Shoshitaishvili, Yan and Hao, Shuang and Kruegel, Christopher and Vigna, Giovanni},
	Booktitle = {Proceedings of the  ACM SIGSAC Conference on Computer and Communications Security (CCS)},
	Organization = {ACM},
	Pages = {2123--2138},
	Title = {Difuze: interface aware fuzzing for kernel drivers},
	Year = {2017}}

@inproceedings{talebi2018charm,
	Author = {Talebi, Seyed Mohammadjavad Seyed and Tavakoli, Hamid and Zhang, Hang and Zhang, Zheng and Sani, Ardalan Amiri and Qian, Zhiyun},
	Booktitle = {Proceedings of the  USENIX Security Symposium (USENIX Security)},
	Pages = {291--307},
	Title = {Charm: facilitating dynamic analysis of device drivers of mobile systems},
	Year = {2018}}

@misc{armsmc,
	Author = {ARM},
	Date-Added = {2016-07-18 13:07:35 +0000},
	Date-Modified = {2015-05-20 13:07:35 +0000},
	Howpublished = {\url{http://infocenter.arm.com/help/topic/com.arm.doc.den0028b/ARM_DEN0028B_SMC_Calling_Convention.pdf}},
	Keywords = {arm, trustzone, tee},
	Title = {{SMC Calling Convention}}}

@article{rosenberg2014reflections,
	Author = {Rosenberg, Dan},
	Journal = {BlackHat USA},
	Title = {Reflections on trusting trustzone},
	Year = {2014}}

@manual{gp_tee_internal,
	Date-Added = {2016-07-11 23:03:41 +0000},
	Date-Modified = {2016-07-11 23:04:06 +0000},
	Edition = {1.1.1},
	Keywords = {trustzone},
	Organization = {GlobalPlatform},
	Title = {{TEE Internal Core API Specification}},
	Year = {2016}}

@article{shen2015exploiting,
	Author = {Shen, Di},
	Journal = {Black Hat USA},
	Title = {Exploiting Trustzone on Android},
	Year = {2015}}

@misc{optee_smc_driver,
	Author = {STMicroelectronics and Linaro Security Working Group},
	Date-Added = {2016-07-18 13:07:35 +0000},
	Date-Modified = {2015-05-20 13:07:35 +0000},
	Howpublished = {\url{https://github.com/linaro-swg/linux/blob/optee/drivers/tee/optee/call.c:L117}},
	Keywords = {optee, trustzone, tee},
	Title = {{OP-TEE non-secure world-secure world smc call}}}

@misc{qseesource,
	Date-Added = {2016-08-16 03:53:48 +0000},
	Date-Modified = {2016-08-16 03:54:47 +0000},
	Howpublished = {\url{https://android.googlesource.com/platform/hardware/qcom/keymaster/+/master/QSEEComAPI.h}},
	Keywords = {qsee, trustzone},
	Organization = {Google},
	Title = {{QSEEComAPI.h}}}

@misc{trustonicsource,
	Author = {Trustonic},
	Date-Added = {2016-08-16 03:55:23 +0000},
	Date-Modified = {2016-08-16 03:56:11 +0000},
	Howpublished = {\url{https://github.com/Trustonic/trustonic-tee-user-space/blob/e3b0b06025605b06fc1e19588098e5011f6afc83/MobiCoreDriverLib/Daemon/MobiCoreDriverDaemon.cpp}},
	Keywords = {trustonic},
	Month = {February},
	Title = {{trustonic-tee-user-space}},
	Year = {2015}}

@misc{tlkNvidia,
	Author = {Hadi Nahari},
	Date-Added = {2016-07-12 00:52:52 +0000},
	Date-Modified = {2016-07-12 00:52:52 +0000},
	Howpublished = {\url{http://www.w3.org/2012/webcrypto/webcrypto-next-workshop/papers/webcrypto2014_submission_25.pdf}},
	Keywords = {tlk, tee, trustzone},
	Title = {{TLK: A FOSS Stack for Secure Hardware Tokens}},
	Year = {2012}}

@misc{qseedoc,
	Author = {{Qualcomm}},
	Note = {\url{https://www.qualcomm.com/solutions/mobile-computing/features/security}},
	Title = {Qualcomm Mobile Security},
	Year = {2018}}

@inproceedings{machiry2017boomerang,
	Author = {Machiry, Aravind and Gustafson, Eric and Spensky, Chad and Salls, Chris and Stephens, Nick and Wang, Ruoyu and Bianchi, Antonio and Choe, Yung Ryn and Kruegel, Christopher and Vigna, Giovanni},
	Booktitle = {Proceedings of the 2017 Network and Distributed System Security Symposium (NDSS)},
	Title = {Boomerang: Exploiting the semantic gap in trusted execution environments},
	Year = {2017}}

@article{zhang2016truspy,
	Author = {Zhang, Ning and Sun, Kun and Shands, Deborah and Lou, Wenjing and Hou, Y Thomas},
	Journal = {IACR Cryptology ePrint Archive},
	Pages = {980},
	Title = {TruSpy: Cache Side-Channel Information Leakage from the Secure World on ARM Devices.},
	Volume = {2016},
	Year = {2016}}

@inproceedings{bukasa2017trustzone,
	Author = {Bukasa, Sebanjila Kevin and Lashermes, Ronan and Le Bouder, H{\'e}l{\`e}ne and Lanet, Jean-Louis and Legay, Axel},
	Booktitle = {Proceedings of the IFIP International Conference on Information Security Theory and Practice},
	Organization = {Springer},
	Pages = {93--109},
	Title = {How TrustZone Could Be Bypassed: Side-Channel Attacks on a Modern System-on-Chip},
	Year = {2017}}

@inproceedings{tang2017clkscrew,
	Author = {Tang, Adrian and Sethumadhavan, Simha and Stolfo, Salvatore},
	Booktitle = {Proceedings of the  USENIX Security Symposium (USENIX Security)},
	Pages = {1057--1074},
	Title = {CLKSCREW: exposing the perils of security-oblivious energy management},
	Year = {2017}}

@inproceedings{haller2013dowser,
	Author = {Haller, Istvan and Slowinska, Asia and Neugschwandtner, Matthias and Bos, Herbert},
	Booktitle = {Proceedings of the  USENIX Security Symposium (USENIX Security)},
	Pages = {49--64},
	Title = {Dowser: a guided fuzzer to find buffer overflow vulnerabilities},
	Year = {2013}}

@article{demott2006evolving,
	Author = {DeMott, Jared},
	Journal = {DEF CON},
	Title = {The evolving art of fuzzing},
	Volume = {14},
	Year = {2006}}

@inproceedings{Ganesh:2009:TDW:1555001.1555061,
	Acmid = {1555061},
	Address = {Washington, DC, USA},
	Author = {Ganesh, Vijay and Leek, Tim and Rinard, Martin},
	Booktitle = {Proceedings of the 31st International Conference on Software Engineering},
	Doi = {10.1109/ICSE.2009.5070546},
	Isbn = {978-1-4244-3453-4},
	Numpages = {11},
	Pages = {474--484},
	Publisher = {IEEE Computer Society},
	Series = {ICSE '09},
	Title = {Taint-based Directed Whitebox Fuzzing},
	Url = {http://dx.doi.org/10.1109/ICSE.2009.5070546},
	Year = {2009},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICSE.2009.5070546}}

@inproceedings{bounimova2013billions,
	Author = {Bounimova, Ella and Godefroid, Patrice and Molnar, David},
	Booktitle = {Proceedings of the 2013 International Conference on Software Engineering},
	Organization = {IEEE Press},
	Pages = {122--131},
	Title = {Billions and billions of constraints: Whitebox fuzz testing in production},
	Year = {2013}}

@inproceedings{wang2010taintscope,
	Author = {Wang, Tielei and Wei, Tao and Gu, Guofei and Zou, Wei},
	Booktitle = {Proceedings of the  IEEE Symposium on Security and Privacy (S\&P)},
	Organization = {IEEE},
	Pages = {497--512},
	Title = {TaintScope: A checksum-aware directed fuzzing tool for automatic software vulnerability detection},
	Year = {2010}}

@inproceedings{stephens2016driller,
	Author = {Stephens, Nick and Grosen, John and Salls, Christopher and Dutcher, Andrew and Wang, Ruoyu and Corbetta, Jacopo and Shoshitaishvili, Yan and Kruegel, Christopher and Vigna, Giovanni},
	Booktitle = {Proceedings of the  Network and Distributed System Security Symposium (NDSS)},
	Title = {{Driller: Augmenting Fuzzing Through Selective Symbolic Execution}},
	Year = {2016}}

@misc{afl,
	Author = {M. Zalewski.},
	Note = {\url{http://lcamtuf.coredump.cx/afl/technical_details.txt}},
	Title = {American Fuzzy Lop},
	Year = {2017}}

@misc{aflbugs,
	Author = {M. Zalewski.},
	Note = {\url{http://lcamtuf.coredump.cx/afl/}},
	Title = {American Fuzzy Lop},
	Year = {2017}}

@misc{gif2png,
	Author = {Eric S. Raymond},
	Note = {\url{https://gitlab.com/esr/gif2png}},
	Title = {The gif2png program converts files from the Graphic Interchange Format (GIF) to Portable Network Graphics},
	Year = {2017}}

@misc{cbmultios,
	Author = {Tail of Bits},
	Note = {\url{https://github.com/trailofbits/cb-multios}},
	Title = {DARPA Challenge Binaries on Linux, OS X, and Windows},
	Year = {2017}}

@misc{cqebugs,
	Author = {LungeTech},
	Note = {\url{http://www.lungetech.com/cgc-corpus/cwe/cqe/}},
	Title = {CGC Data Archive for Qualifiers},
	Year = {2017}}

@misc{cfebugs,
	Author = {LungeTech},
	Note = {\url{http://www.lungetech.com/cgc-corpus/cwe/cfe/}},
	Title = {CGC Data Archive for Finals},
	Year = {2017}}

@misc{darpacgc,
	Author = {DARPA},
	Note = {\url{http://archive.darpa.mil/cybergrandchallenge/}},
	Title = {DARPA Cyber Grand Challenge},
	Year = {2016}}

@misc{md5sum,
	Author = {GNU},
	Note = {\url{https://www.gnu.org/software/coreutils/manual/html_node/md5sum-invocation.html}},
	Title = {md5sum: Print or check MD5 digests},
	Year = {2017}}

@misc{aflselection,
	Author = {Michal Zalewski},
	Note = {\url{https://github.com/mirrorer/afl/blob/master/docs/technical_details.txt}},
	Title = {AFL Selection Strategy},
	Year = {2017}}

@misc{intelpt,
	Author = {Intel},
	Note = {\url{https://software.intel.com/en-us/blogs/2013/09/18/processor-tracing}},
	Title = {Intel Processor Tracing},
	Year = {2017}}

@misc{uafvuln,
	Author = {CWE},
	Note = {\url{https://cwe.mitre.org/data/definitions/416.html}},
	Title = {Use-After-Free Vulnerability},
	Year = {2017}}

@misc{jscore,
	Author = {Apple},
	Note = {\url{https://developer.apple.com/documentation/javascriptcore}},
	Title = {JavaScript Core},
	Year = {2017}}

@misc{v8jsc,
	Author = {Google},
	Note = {\url{https://developers.google.com/v8/}},
	Title = {V8 JavaScript Engine},
	Year = {2017}}

@misc{countedset,
	Author = {Apple},
	Note = {\url{https://developer.apple.com/documentation/foundation/nscountedset}},
	Title = {Counted Set},
	Year = {2017}}

@misc{kcov,
	Author = {Dmitry Vyukov},
	Note = {\url{https://lwn.net/Articles/671640/}},
	Title = {KCOV: Kernel Coverage},
	Year = {2017}}

@misc{shellphish-phrack,
	Author = {Shellphish Team},
	Note = {\url{http://phrack.org/papers/cyber_grand_shellphish.html}},
	Title = {Cyber Grand Shellphish},
	Year = {2017}}

@misc{memorytrace,
	Author = {Austin Clements},
	Note = {\url{https://github.com/aclements/mtrace}},
	Title = {Memory Access Tracing},
	Year = {2017}}

@article{DBLP:journals/corr/abs-1708-02749,
	Archiveprefix = {arXiv},
	Author = {Yan Shoshitaishvili and Michael Weissbacher and Lukas Dresel and Christopher Salls and Ruoyu Wang and Christopher Kruegel and Giovanni Vigna},
	Bibsource = {dblp computer science bibliography, http://dblp.org},
	Biburl = {http://dblp.org/rec/bib/journals/corr/abs-1708-02749},
	Eprint = {1708.02749},
	Journal = {CoRR},
	Timestamp = {Tue, 05 Sep 2017 10:03:46 +0200},
	Title = {Rise of the HaCRS: Augmenting Autonomous Cyber Reasoning Systems with Human Assistance},
	Url = {http://arxiv.org/abs/1708.02749},
	Volume = {abs/1708.02749},
	Year = {2017},
	Bdsk-Url-1 = {http://arxiv.org/abs/1708.02749}}

@misc{fas-blog,
	Author = {For All Secure},
	Note = {\url{https://forallsecure.com/blog/2016/08/06/mayhem-wins-darpa-cgc/#more-1107}},
	Title = {For All Secure wins CGC},
	Year = {2017}}

@article{stagefright-blackhat,
	Author = {Drake, Joshua},
	Journal = {BlackHat USA},
	Title = {Stagefright: Scary code in the heart of android},
	Year = {2015}}

@misc{afltechdoc,
	Author = {Dmitry Vyukov},
	Note = {\url{https://github.com/rc0r/afl-fuzz/blob/master/docs/technical_details.txt#L23}},
	Title = {AFL Abstraction Function},
	Year = {2017}}

@misc{p1kachu_ioctls,
	Author = {Stanislas Lejay},
	Note = {\url{https://thunderco.re/project/security/2016/07/18/fuzzing-ioctls/}},
	Title = {Fuzzing IOCTLs with angr},
	Year = {2016}}

@inproceedings{cousot1977abstract,
	Author = {Cousot, Patrick and Cousot, Radhia},
	Booktitle = {Proceedings of the 4th ACM SIGACT-SIGPLAN symposium on Principles of programming languages},
	Organization = {ACM},
	Pages = {238--252},
	Title = {Abstract interpretation: a unified lattice model for static analysis of programs by construction or approximation of fixpoints},
	Year = {1977}}

@article{jaoua2002galois,
	Author = {Jaoua, Ali and Elloumi, Samir},
	Journal = {Journal of Systems and Software},
	Number = {2},
	Pages = {149--163},
	Publisher = {Elsevier},
	Title = {Galois connection, formal concepts and Galois lattice in real relations: application in a real classifier},
	Volume = {60},
	Year = {2002}}

@inproceedings{difuzemachiry,
	Address = {Texas, USA},
	Author = {Jake Corina, Aravind Machiry, Christopher Salls, Yan Shoshitaishvili, Shuang Hao, Christopher Kruegel, Giovanni Vigna},
	Booktitle = {Proceedings of the ACM Conference on Computer and Communications Security (CCS)},
	Publisher = {ACM},
	Title = {DIFUZE: Interface Aware Fuzzing for Kernel Drivers},
	Year = {2017}}

@article{chen2018angora,
	Author = {Chen, Peng and Chen, Hao},
	Journal = {arXiv preprint arXiv:1803.01307},
	Title = {Angora: Efficient Fuzzing by Principled Search},
	Year = {2018}}

@inproceedings{Neugschwandtner:2015:BNB:2699026.2699098,
	Acmid = {2699098},
	Address = {New York, NY, USA},
	Author = {Neugschwandtner, Matthias and Milani Comparetti, Paolo and Haller, Istvan and Bos, Herbert},
	Booktitle = {Proceedings of the 5th ACM Conference on Data and Application Security and Privacy},
	Doi = {10.1145/2699026.2699098},
	Isbn = {978-1-4503-3191-3},
	Keywords = {buffer overread, dynamic symbolic execution, out-of-bounds access, symbolic execution guidance, targeted testing},
	Location = {San Antonio, Texas, USA},
	Numpages = {11},
	Pages = {87--97},
	Publisher = {ACM},
	Series = {CODASPY '15},
	Title = {The BORG: Nanoprobing Binaries for Buffer Overreads},
	Url = {http://doi.acm.org/10.1145/2699026.2699098},
	Year = {2015}}

@inproceedings{rawat2017vuzzer,
	Author = {Rawat, Sanjay and Jain, Vivek and Kumar, Ashish and Cojocar, Lucian and Giuffrida, Cristiano and Bos, Herbert},
	Booktitle = {Proceedings of the  Network and Distributed System Security Symposium (NDSS)},
	Title = {VUzzer: Application-aware Evolutionary Fuzzing},
	Year = {2017}}

@inproceedings{rawat2011offset,
	Author = {Rawat, Sanjay and Mounier, Laurent},
	Booktitle = {Proceedings of the Software Testing, Verification and Validation Workshops (ICSTW)},
	Organization = {IEEE},
	Pages = {531--533},
	Title = {Offset-aware mutation based fuzzing for buffer overflow vulnerabilities: Few preliminary results},
	Year = {2011}}

@inproceedings{Li:2017:SPB:3106237.3106295,
	Acmid = {3106295},
	Address = {New York, NY, USA},
	Author = {Li, Yuekang and Chen, Bihuan and Chandramohan, Mahinthan and Lin, Shang-Wei and Liu, Yang and Tiu, Alwen},
	Booktitle = {Proceedings of the  11th Joint Meeting on Foundations of Software Engineering},
	Doi = {10.1145/3106237.3106295},
	Isbn = {978-1-4503-5105-8},
	Keywords = {binary fuzzing, binary instrumentation, coverage-based fuzzing},
	Location = {Paderborn, Germany},
	Numpages = {11},
	Pages = {627--637},
	Publisher = {ACM},
	Series = {ESEC/FSE 2017},
	Title = {Steelix: Program-state Based Binary Fuzzing},
	Url = {http://doi.acm.org/10.1145/3106237.3106295},
	Year = {2017}}

@inproceedings{bohme2017directed,
	Author = {B{\"o}hme, Marcel and Pham, Van-Thuan and Nguyen, Manh-Dung and Roychoudhury, Abhik},
	Booktitle = {Proceedings of the  ACM SIGSAC Conference on Computer and Communications Security (CCS)},
	Organization = {ACM},
	Pages = {2329--2344},
	Title = {Directed greybox fuzzing},
	Year = {2017}}

@inproceedings{Bohme:2016:CGF:2976749.2978428,
	Acmid = {2978428},
	Address = {New York, NY, USA},
	Author = {B\"{o}hme, Marcel and Pham, Van-Thuan and Roychoudhury, Abhik},
	Booktitle = {Proceedings of the  ACM SIGSAC Conference on Computer and Communications Security (CCS)},
	Doi = {10.1145/2976749.2978428},
	Isbn = {978-1-4503-4139-4},
	Keywords = {foundations, fuzzing, software security, testing efficiency, vulnerability detection},
	Location = {Vienna, Austria},
	Numpages = {12},
	Pages = {1032--1043},
	Publisher = {ACM},
	Series = {CCS '16},
	Title = {Coverage-based Greybox Fuzzing As Markov Chain},
	Url = {http://doi.acm.org/10.1145/2976749.2978428},
	Year = {2016},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/2976749.2978428},
	Bdsk-Url-2 = {https://doi.org/10.1145/2976749.2978428}}

@inproceedings{holler2012fuzzing,
	Author = {Holler, Christian and Herzig, Kim and Zeller, Andreas},
	Booktitle = {Proceedings of the  USENIX Security Symposium (USENIX Security)},
	Pages = {445--458},
	Title = {Fuzzing with Code Fragments.},
	Year = {2012}}

@inproceedings{Duchene:2014:KEF:2557547.2557550,
	Acmid = {2557550},
	Address = {New York, NY, USA},
	Author = {Duchene, Fabien and Rawat, Sanjay and Richier, Jean-Luc and Groz, Roland},
	Booktitle = {Proceedings of the  ACM Conference on Data and Application Security and Privacy},
	Doi = {10.1145/2557547.2557550},
	Isbn = {978-1-4503-2278-2},
	Keywords = {black-box security testing, cross-site scripting, evolutionary algorithm, fuzzing, model inference, taint inference},
	Location = {San Antonio, Texas, USA},
	Numpages = {12},
	Pages = {37--48},
	Publisher = {ACM},
	Series = {CODASPY '14},
	Title = {KameleonFuzz: Evolutionary Fuzzing for Black-box XSS Detection},
	Url = {http://doi.acm.org/10.1145/2557547.2557550},
	Year = {2014}}

@inproceedings{Grieco:2016:QAR:2976002.2976017,
	Acmid = {2976017},
	Address = {New York, NY, USA},
	Author = {Grieco, Gustavo and Ceresa, Mart\'{\i}n and Buiras, Pablo},
	Booktitle = {Proceedings of the 9th International Symposium on Haskell},
	Doi = {10.1145/2976002.2976017},
	Isbn = {978-1-4503-4434-0},
	Keywords = {Fuzzing, Hackage, Haskell, QuickCheck},
	Location = {Nara, Japan},
	Numpages = {8},
	Pages = {13--20},
	Publisher = {ACM},
	Series = {Haskell 2016},
	Title = {QuickFuzz: An Automatic Random Fuzzer for Common File Formats},
	Url = {http://doi.acm.org/10.1145/2976002.2976017},
	Year = {2016},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/2976002.2976017},
	Bdsk-Url-2 = {https://doi.org/10.1145/2976002.2976017}}

@inproceedings{liu2008vulnerability,
	Author = {Liu, Guang-Hong and Wu, Gang and Tao, Zheng and Shuai, Jian-Mei and Tang, Zhuo-Chun},
	Booktitle = {Proceedings of the Convergence and Hybrid Information Technology},
	Organization = {IEEE},
	Pages = {491--497},
	Title = {Vulnerability analysis for x86 executables using genetic algorithm and fuzzing},
	Volume = {2},
	Year = {2008}}

@inproceedings{Godefroid:2008:GWF:1375581.1375607,
	Acmid = {1375607},
	Address = {New York, NY, USA},
	Author = {Godefroid, Patrice and Kiezun, Adam and Levin, Michael Y.},
	Booktitle = {Proceedings of the  ACM SIGPLAN Conference on Programming Language Design and Implementation},
	Doi = {10.1145/1375581.1375607},
	Isbn = {978-1-59593-860-2},
	Keywords = {automatic test generation, grammars, program verification, software testing},
	Location = {Tucson, AZ, USA},
	Numpages = {10},
	Pages = {206--215},
	Publisher = {ACM},
	Series = {PLDI '08},
	Title = {Grammar-based Whitebox Fuzzing},
	Url = {http://doi.acm.org/10.1145/1375581.1375607},
	Year = {2008},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/1375581.1375607},
	Bdsk-Url-2 = {https://doi.org/10.1145/1375581.1375607}}

@inproceedings{Le:2015:FDC:2814270.2814319,
	Acmid = {2814319},
	Address = {New York, NY, USA},
	Author = {Le, Vu and Sun, Chengnian and Su, Zhendong},
	Booktitle = {Proceedings of the  ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications},
	Doi = {10.1145/2814270.2814319},
	Isbn = {978-1-4503-3689-5},
	Keywords = {Compiler testing, Markov Chain Monte Carlo, automated testing, equivalent program variants},
	Location = {Pittsburgh, PA, USA},
	Numpages = {14},
	Pages = {386--399},
	Publisher = {ACM},
	Series = {OOPSLA 2015},
	Title = {Finding Deep Compiler Bugs via Guided Stochastic Program Mutation},
	Url = {http://doi.acm.org/10.1145/2814270.2814319},
	Year = {2015},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/2814270.2814319},
	Bdsk-Url-2 = {https://doi.org/10.1145/2814270.2814319}}

@inproceedings{Dewey:2015:FRT:2916135.2916165,
	Acmid = {2916165},
	Address = {Washington, DC, USA},
	Author = {Dewey, Kyle and Roesch, Jared and Hardekopf, Ben},
	Booktitle = {Proceedings of the  IEEE/ACM International Conference on Automated Software Engineering (ASE)},
	Doi = {10.1109/ASE.2015.65},
	Isbn = {978-1-5090-0025-8},
	Numpages = {12},
	Pages = {482--493},
	Publisher = {IEEE Computer Society},
	Series = {ASE '15},
	Title = {Fuzzing the Rust Typechecker Using CLP (T)},
	Url = {http://dx.doi.org/10.1109/ASE.2015.65},
	Year = {2015},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ASE.2015.65}}

@inproceedings{godefroid2008automated,
	Author = {Godefroid, Patrice and Levin, Michael Y and Molnar, David A and others},
	Booktitle = {Proceedings of the Symposium on Network and Distributed System Security (NDSS)},
	Title = {Automated Whitebox Fuzz Testing.},
	Year = {2008}}

@inproceedings{godefroid2007random,
	Author = {Godefroid, Patrice},
	Booktitle = {Proceedings of the 2nd international workshop on Random testing},
	Organization = {ACM},
	Pages = {1--1},
	Title = {Random testing for security: blackbox vs. whitebox fuzzing},
	Year = {2007}}

@inproceedings{godefroid2010blackbox,
	Author = {Godefroid, Patrice},
	Booktitle = {Proceedings of the International Symposium on Software Testing and Analysis, Powerpoint},
	Title = {From blackbox fuzzing to whitebox fuzzing towards verification},
	Year = {2010}}

@inproceedings{Godefroid:2005:DDA:1065010.1065036,
	Acmid = {1065036},
	Address = {New York, NY, USA},
	Author = {Godefroid, Patrice and Klarlund, Nils and Sen, Koushik},
	Booktitle = {Proceedings of the ACM SIGPLAN Conference on Programming Language Design and Implementation},
	Doi = {10.1145/1065010.1065036},
	Isbn = {1-59593-056-6},
	Keywords = {automated test generation, interfaces, program verification, random testing, software testing},
	Location = {Chicago, IL, USA},
	Numpages = {11},
	Pages = {213--223},
	Publisher = {ACM},
	Series = {PLDI '05},
	Title = {DART: Directed Automated Random Testing},
	Url = {http://doi.acm.org/10.1145/1065010.1065036},
	Year = {2005},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/1065010.1065036},
	Bdsk-Url-2 = {https://doi.org/10.1145/1065010.1065036}}

@article{Miller,
	Acmid = {96279},
	Address = {New York, NY, USA},
	Author = {Miller, Barton P. and Fredriksen, Louis and So, Bryan},
	Doi = {10.1145/96267.96279},
	Issn = {0001-0782},
	Issue_Date = {Dec. 1990},
	Journal = {Commun. ACM},
	Month = dec,
	Number = {12},
	Numpages = {13},
	Pages = {32--44},
	Publisher = {ACM},
	Title = {An Empirical Study of the Reliability of UNIX Utilities},
	Url = {http://doi.acm.org/10.1145/96267.96279},
	Volume = {33},
	Year = {1990},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/96267.96279},
	Bdsk-Url-2 = {https://doi.org/10.1145/96267.96279}}

@article{campana2009fuzzgrind,
	Author = {Campana, Gabriel},
	Journal = {Actes du},
	Pages = {213--229},
	Title = {Fuzzgrind: un outil de fuzzing automatique},
	Year = {2009}}

@article{DBLP:journals/corr/Bastani0AL16,
	Author = {Osbert Bastani and Rahul Sharma and Alex Aiken and Percy Liang},
	Bibsource = {dblp computer science bibliography, http://dblp.org},
	Biburl = {http://dblp.uni-trier.de/rec/bib/journals/corr/Bastani0AL16},
	Journal = {CoRR},
	Timestamp = {Fri, 02 Sep 2016 17:46:24 +0200},
	Title = {Synthesizing Program Input Grammars},
	Url = {http://arxiv.org/abs/1608.01723},
	Volume = {abs/1608.01723},
	Year = {2016},
	Bdsk-Url-1 = {http://arxiv.org/abs/1608.01723}}

@inproceedings{Kargen:2015:TPA:2786805.2786844,
	Acmid = {2786844},
	Address = {New York, NY, USA},
	Author = {Karg{\'e}n, Ulf and Shahmehri, Nahid},
	Booktitle = {Proceedings of the  Joint Meeting on Foundations of Software Engineering},
	Doi = {10.1145/2786805.2786844},
	Isbn = {978-1-4503-3675-8},
	Keywords = {Fuzz testing, black-box, dynamic slicing, fuzzing, program mutation},
	Location = {Bergamo, Italy},
	Numpages = {11},
	Pages = {782--792},
	Publisher = {ACM},
	Series = {ESEC/FSE 2015},
	Title = {Turning Programs Against Each Other: High Coverage Fuzz-testing Using Binary-code Mutation and Dynamic Slicing},
	Url = {http://doi.acm.org/10.1145/2786805.2786844},
	Year = {2015},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/2786805.2786844},
	Bdsk-Url-2 = {https://doi.org/10.1145/2786805.2786844}}

@inproceedings{Lin:2010:ARE:2788959.2788964,
	Acmid = {2788964},
	Address = {West Lafayette, IN},
	Articleno = {5},
	Author = {Lin, Zhiqiang and Zhang, Xiangyu and Xu, Dongyan},
	Booktitle = {Proceedings of the  Annual Information Security Symposium},
	Location = {West Lafayette, Indiana},
	Numpages = {1},
	Pages = {5:1--5:1},
	Publisher = {CERIAS - Purdue University},
	Series = {CERIAS '10},
	Title = {Automatic Reverse Engineering of Data Structures from Binary Execution},
	Url = {http://dl.acm.org/citation.cfm?id=2788959.2788964},
	Year = {2010},
	Bdsk-Url-1 = {http://dl.acm.org/citation.cfm?id=2788959.2788964}}

@inproceedings{peng2018t,
	Author = {Peng, Hui and Shoshitaishvili, Yan and Payer, Mathias},
	Booktitle = {Proceedings of the  IEEE Symposium on Security and Privacy (S\&P)},
	Organization = {IEEE},
	Pages = {697--710},
	Title = {T-Fuzz: fuzzing by program transformation},
	Year = {2018}}

@inproceedings{Cha:2015:PMF:2867539.2867674,
	Acmid = {2867674},
	Address = {Washington, DC, USA},
	Author = {Cha, Sang Kil and Woo, Maverick and Brumley, David},
	Booktitle = {Proceedings of the  IEEE Symposium on Security and Privacy (S\&P)},
	Doi = {10.1109/SP.2015.50},
	Isbn = {978-1-4673-6949-7},
	Keywords = {fuzzing, mutation ratio optimization, mutational fuzzing, software testing},
	Numpages = {17},
	Pages = {725--741},
	Publisher = {IEEE Computer Society},
	Series = {SP '15},
	Title = {Program-Adaptive Mutational Fuzzing},
	Url = {http://dx.doi.org/10.1109/SP.2015.50},
	Year = {2015},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/SP.2015.50}}

@inproceedings{Rebert:2014:OSS:2671225.2671280,
	Acmid = {2671280},
	Address = {Berkeley, CA, USA},
	Author = {Rebert, Alexandre and Cha, Sang Kil and Avgerinos, Thanassis and Foote, Jonathan and Warren, David and Grieco, Gustavo and Brumley, David},
	Booktitle = {Proceedings of the  USENIX Security Symposium (USENIX Security)},
	Isbn = {978-1-931971-15-7},
	Location = {San Diego, CA},
	Numpages = {15},
	Pages = {861--875},
	Publisher = {USENIX Association},
	Series = {SEC'14},
	Title = {Optimizing Seed Selection for Fuzzing},
	Url = {http://dl.acm.org/citation.cfm?id=2671225.2671280},
	Year = {2014},
	Bdsk-Url-1 = {http://dl.acm.org/citation.cfm?id=2671225.2671280}}

@inproceedings{tsankov2012secfuzz,
	Author = {Tsankov, Petar and Dashti, Mohammad Torabi and Basin, David},
	Booktitle = {Proceedings of  International Workshop on Automation of Software Test (AST)},
	Organization = {IEEE},
	Pages = {1--7},
	Title = {SECFUZZ: Fuzz-testing security protocols},
	Year = {2012}}

@inproceedings{Comparetti:2009:PPS:1607723.1608128,
	Acmid = {1608128},
	Address = {Washington, DC, USA},
	Author = {Comparetti, Paolo Milani and Wondracek, Gilbert and Kruegel, Christopher and Kirda, Engin},
	Booktitle = {Proceedings of the  IEEE Symposium on Security and Privacy (S\&P)},
	Doi = {10.1109/SP.2009.14},
	Isbn = {978-0-7695-3633-0},
	Numpages = {16},
	Pages = {110--125},
	Publisher = {IEEE Computer Society},
	Series = {SP '09},
	Title = {Prospex: Protocol Specification Extraction},
	Url = {http://dx.doi.org/10.1109/SP.2009.14},
	Year = {2009},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/SP.2009.14}}

@misc{iofuzz,
	Author = {debasishm89},
	Note = {\url{https://github.com/debasishm89/iofuzz}},
	Title = {A mutation based user mode (ring3) dumb in-memory Windows Kernel (IOCTL) Fuzzer},
	Year = {2014}}

@article{miller2007analysis,
	Author = {Miller, Charlie and Peterson, Zachary NJ},
	Journal = {Independent Security Evaluators, Tech. Rep},
	Title = {Analysis of mutation and generation-based fuzzing},
	Year = {2007}}

@misc{ioattack,
	Author = {Microsoft},
	Note = {\url{https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/how-to-perform-fuzz-tests-with-iospy-and-ioattack}},
	Title = {How to Perform Fuzz Tests with IoSpy and IoAttack},
	Year = {2017}}

@misc{ioctlbf,
	Author = {Xst3nZ},
	Note = {\url{https://code.google.com/archive/p/ioctlbf/}},
	Title = {IOCTLbf is just a small tool (Proof of Concept) that can be used to search vulnerabilities in Windows kernel drivers.},
	Year = {2012}}

@misc{ioctlfuzzer,
	Author = {Cr4sh},
	Note = {\url{https://github.com/Cr4sh/ioctlfuzzer}},
	Title = {IOCTL Fuzzer - Windows kernel drivers fuzzer},
	Year = {2011}}

@inproceedings{jones2011trinity,
	Author = {Jones, Dave},
	Booktitle = {Proceedings of the 13th Ottawa Linux Symposium},
	Title = {Trinity: A system call fuzzer},
	Year = {2011}}

@techreport{weaver2015perf,
	Author = {Weaver, Vincent M and Jones, Dave},
	Institution = {Technical Report UMAINEVMW-TR-PERF-FUZZER, University of Maine},
	Title = {perf fuzzer: Targeted fuzzing of the perf event open () system call},
	Year = {2015}}

@inproceedings{mendoncca2008fuzzing,
	Author = {Mendon{\c{c}}a, Manuel and Neves, Nuno},
	Booktitle = {Proceedings of Dependable Computing Conference},
	Organization = {IEEE},
	Pages = {110--119},
	Title = {Fuzzing wi-fi drivers to locate security vulnerabilities},
	Year = {2008}}

@article{butti2008discovering,
	Author = {Butti, Laurent and Tinnes, Julien},
	Journal = {Journal in Computer Virology},
	Number = {1},
	Pages = {25--37},
	Publisher = {Springer},
	Title = {Discovering and exploiting 802.11 wireless driver vulnerabilities},
	Volume = {4},
	Year = {2008}}

@article{schumilo2014don,
	Author = {Schumilo, Sergej and Spenneberg, Ralf and Schwartke, H},
	Journal = {Blackhat Europe},
	Title = {Don't trust your USB! How to find bugs in USB device drivers},
	Year = {2014}}

@inproceedings{sim2011fuzzing,
	Author = {Sim, Kwan Yong and Kuo, F-C and Merkel, R},
	Booktitle = {Proceedings of the ACM Symposium on Applied Computing},
	Organization = {ACM},
	Pages = {387--392},
	Title = {Fuzzing the out-of-memory killer on embedded Linux: an adaptive random approach},
	Year = {2011}}

@inproceedings{androiddrivbug,
	Author = {Jeffrey Vander Stoep},
	Booktitle = {Linux Security Summit},
	Organization = {Linux Foundation},
	Title = {Android: protecting the kernel},
	Year = {2016}}

@misc{kasan,
	Author = {Google},
	Note = {\url{https://www.kernel.org/doc/html/latest/dev-tools/kasan.html}},
	Title = {The Kernel Address Sanitizer},
	Year = {2016}}

@misc{ktsan,
	Author = {Google},
	Note = {\url{https://github.com/google/ktsan}},
	Title = {The Kernel Thread Sanitizer},
	Year = {2016}}

@misc{kubsan,
	Author = {Google},
	Note = {\url{https://www.kernel.org/doc/html/latest/dev-tools/ubsan.html}},
	Title = {The Kernel Undefined Behavior Sanitizer},
	Year = {2016}}

@inproceedings{serebryany2012addresssanitizer,
	Author = {Serebryany, Konstantin and Bruening, Derek and Potapenko, Alexander and Vyukov, Dmitriy},
	Booktitle = {Proceedings of the USENIX Annual Technical Conference},
	Pages = {309--318},
	Title = {AddressSanitizer: A Fast Address Sanity Checker.},
	Year = {2012}}

@inproceedings{Renzelmann:2012:STD:2387880.2387908,
	Acmid = {2387908},
	Address = {Berkeley, CA, USA},
	Author = {Renzelmann, Matthew J. and Kadav, Asim and Swift, Michael M.},
	Booktitle = {Proceedings of the 10th USENIX Conference on Operating Systems Design and Implementation},
	Isbn = {978-1-931971-96-6},
	Location = {Hollywood, CA, USA},
	Numpages = {14},
	Pages = {279--292},
	Publisher = {USENIX Association},
	Series = {OSDI'12},
	Title = {SymDrive: Testing Drivers Without Devices},
	Url = {http://dl.acm.org/citation.cfm?id=2387880.2387908},
	Year = {2012},
	Bdsk-Url-1 = {http://dl.acm.org/citation.cfm?id=2387880.2387908}}

@misc{peach,
	Author = {Peach},
	Note = {\url{http://www.peachfuzzer.com/}},
	Title = {The Peach Fuzzer},
	Year = {2017}}

@misc{linusastdebate,
	Author = {Wiki},
	Note = {\url{https://en.wikipedia.org/wiki/Tanenbaum\%E2\%80\%93Torvalds\_debate}},
	Title = {Tanenbaum--Torvalds debate},
	Year = {2017}}

@misc{gplicense,
	Author = {GNU},
	Note = {\url{https://www.gnu.org/licenses/gpl-3.0.en.html}},
	Title = {GNU General Public License},
	Year = {2007}}

@article{Merlo:2016:AVS:2965262.2965491,
	Acmid = {2965491},
	Address = {Amsterdam, The Netherlands, The Netherlands},
	Author = {Merlo, Alessio and Costa, Gabriele and Verderame, Luca and Armando, Alessandro},
	Doi = {10.1016/j.pmcj.2016.01.006},
	Issn = {1574-1192},
	Issue_Date = {August 2016},
	Journal = {Pervasive Mob. Comput.},
	Keywords = {Android OS, Android Security Framework, Android security, SEAndroid, SELinux MAC},
	Month = aug,
	Number = {C},
	Numpages = {19},
	Pages = {113--131},
	Publisher = {Elsevier Science Publishers B. V.},
	Title = {Android vs. SEAndroid},
	Url = {https://doi.org/10.1016/j.pmcj.2016.01.006},
	Volume = {30},
	Year = {2016},
	Bdsk-Url-1 = {https://doi.org/10.1016/j.pmcj.2016.01.006}}

@inproceedings{Nethercote,
	Acmid = {1250746},
	Address = {New York, NY, USA},
	Author = {Nethercote, Nicholas and Seward, Julian},
	Booktitle = {Proceedings of the  ACM SIGPLAN Conference on Programming Language Design and Implementation},
	Doi = {10.1145/1250734.1250746},
	Isbn = {978-1-59593-633-2},
	Keywords = {Memcheck, Valgrind, dynamic binary analysis, dynamic binary instrumentation, shadow values},
	Location = {San Diego, California, USA},
	Numpages = {12},
	Pages = {89--100},
	Publisher = {ACM},
	Series = {PLDI '07},
	Title = {Valgrind: A Framework for Heavyweight Dynamic Binary Instrumentation},
	Url = {http://doi.acm.org/10.1145/1250734.1250746},
	Year = {2007},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/1250734.1250746},
	Bdsk-Url-2 = {https://doi.org/10.1145/1250734.1250746}}

@article{protos2012,
	Author = {Juha R\"{o}ning and Marko Laakso and Ari Takanen},
	Journal = {Invited presentation at Microsoft Research},
	Month = May,
	Title = {PROTOS -- Systematic Approach to Eliminate Software Vulnerabilities},
	Year = {2002}}

@misc{spike2002,
	Author = {Dave Aitel},
	Note = {\url{https://www.immunitysec.com/downloads/advantages\_of\_block\_based\_analysis.html}},
	Title = {The Advantages of Block-Based Protocol Analysis for Security Testing},
	Year = {2002}}

@misc{chardevregis,
	Author = {kernel},
	Note = {\url{http://www.makelinux.net/ldd3/chp-3-sect-4}},
	Title = {Character device registration},
	Year = {2001}}

@misc{procdevregis,
	Author = {redhat},
	Note = {\url{https://access.redhat.com/documentation/en-US/Red\_Hat\_Enterprise\_Linux/4/html/Reference\_Guide/s2-proc-devices.html}},
	Title = {Proc device registration},
	Year = {2017}}

@misc{c2xml,
	Author = {Linus Torvalds},
	Note = {\url{http://c2xml.sourceforge.net/}},
	Title = {C2XML - Converting source code to XML},
	Year = {2011}}

@misc{llvmbitcode,
	Author = {LLVM Project},
	Note = {\url{http://llvm.org/docs/BitCodeFormat.html}},
	Title = {LLVM Bitcode File Format},
	Year = {2003}}

@book{corbet2005linux,
	Author = {Corbet, Jonathan and Rubini, Alessandro and Kroah-Hartman, Greg},
	Publisher = {" O'Reilly Media, Inc."},
	Title = {Linux Device Drivers: Where the Kernel Meets the Hardware},
	Year = {2005}}

@book{rubini2001linux,
	Author = {Rubini, Alessandro and Corbet, Jonathan},
	Publisher = {" O'Reilly Media, Inc."},
	Title = {Linux device drivers},
	Year = {2001}}

@book{aho1986compiler,
	Author = {Alfred Aho and Jeffrey Ullman and Monica S. Lam and Ravi Sethi},
	Publisher = {"Addison-Wesley"},
	Title = {Compilers: Principles, Techniques, and Tools},
	Year = {1986}}

@inproceedings{Ball:2006:TSA:1217935.1217943,
	Acmid = {1217943},
	Address = {New York, NY, USA},
	Author = {Ball, Thomas and Bounimova, Ella and Cook, Byron and Levin, Vladimir and Lichtenberg, Jakob and McGarvey, Con and Ondrusek, Bohus and Rajamani, Sriram K. and Ustuner, Abdullah},
	Booktitle = {Proceedings of the 1st ACM SIGOPS/EuroSys European Conference on Computer Systems 2006},
	Doi = {10.1145/1217935.1217943},
	Isbn = {1-59593-322-0},
	Keywords = {formal verification, software model checking},
	Location = {Leuven, Belgium},
	Numpages = {13},
	Pages = {73--85},
	Publisher = {ACM},
	Series = {EuroSys '06},
	Title = {Thorough Static Analysis of Device Drivers},
	Url = {http://doi.acm.org/10.1145/1217935.1217943},
	Year = {2006},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/1217935.1217943},
	Bdsk-Url-2 = {https://doi.org/10.1145/1217935.1217943}}

@inbook{Breuer2006,
	Address = {Berlin, Heidelberg},
	Author = {Breuer, Peter T. and Pickin, Simon},
	Booktitle = {Reliable Software Technologies -- Ada-Europe 2006: 11th Ada-Europe International Conference on Reliable Software Technologies, Porto, Portugal, June 5-9, 2006. Proceedings},
	Doi = {10.1007/11767077_5},
	Editor = {Pinho, Lu{\'\i}s Miguel and Gonz{\'a}lez Harbour, Michael},
	Isbn = {978-3-540-34664-7},
	Pages = {56--70},
	Publisher = {Springer Berlin Heidelberg},
	Title = {One Million (LOC) and Counting: Static Analysis for Errors and Vulnerabilities in the Linux Kernel Source Code},
	Url = {http://dx.doi.org/10.1007/11767077_5},
	Year = {2006},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/11767077_5}}

@inbook{Post2007,
	Address = {Berlin, Heidelberg},
	Author = {Post, Hendrik and K{\"u}chlin, Wolfgang},
	Booktitle = {Integrated Formal Methods: 6th International Conference, IFM 2007, Oxford, UK, July 2-5, 2007. Proceedings},
	Doi = {10.1007/978-3-540-73210-5_27},
	Editor = {Davies, Jim and Gibbons, Jeremy},
	Isbn = {978-3-540-73210-5},
	Pages = {518--537},
	Publisher = {Springer Berlin Heidelberg},
	Title = {Integrated Static Analysis for Linux Device Driver Verification},
	Url = {http://dx.doi.org/10.1007/978-3-540-73210-5_27},
	Year = {2007},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/978-3-540-73210-5_27}}

@inproceedings{Ashcraft2002,
	Author = {K. Ashcraft and D. Engler},
	Booktitle = {Proceedings of the  IEEE Symposium on Security and Privacy (S\&P)},
	Doi = {10.1109/SECPRI.2002.1004368},
	Issn = {1081-6011},
	Pages = {143-159},
	Title = {Using programmer-written compiler extensions to catch security holes},
	Year = {2002}}

@misc{andriodshare,
	Author = {International Data Corporation},
	Note = {\url{http://www.idc.com/promo/smartphone-market-share/os}},
	Title = {Smartphone OS Market Share},
	Year = {2016}}

@inproceedings{bekrar2012taint,
	Author = {Bekrar, Sofia and Bekrar, Chaouki and Groz, Roland and Mounier, Laurent},
	Booktitle = {Proceedings of the Software Testing, Verification and Validation (ICST), 2012 IEEE Fifth International Conference on},
	Organization = {IEEE},
	Pages = {818--825},
	Title = {A taint based approach for smart fuzzing},
	Year = {2012}}

@misc{armexceptionlevel,
	Author = {ARM},
	Note = {\url{http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0488c/CHDHJIJG.html}},
	Title = {ARM Exception levels},
	Year = {2013}}

@inproceedings{Felt:2011:SMM:2046614.2046618,
	Acmid = {2046618},
	Address = {New York, NY, USA},
	Author = {Felt, Adrienne Porter and Finifter, Matthew and Chin, Erika and Hanna, Steve and Wagner, David},
	Booktitle = {Proceedings of the 1st ACM Workshop on Security and Privacy in Smartphones and Mobile Devices},
	Doi = {10.1145/2046614.2046618},
	Isbn = {978-1-4503-1000-0},
	Keywords = {malware, mobile devices, smartphones},
	Location = {Chicago, Illinois, USA},
	Numpages = {12},
	Pages = {3--14},
	Publisher = {ACM},
	Series = {SPSM '11},
	Title = {A Survey of Mobile Malware in the Wild},
	Url = {http://doi.acm.org/10.1145/2046614.2046618},
	Year = {2011},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/2046614.2046618},
	Bdsk-Url-2 = {https://doi.org/10.1145/2046614.2046618}}

@inproceedings{Cadar:2006:EAG:1180405.1180445,
	Acmid = {1180445},
	Address = {New York, NY, USA},
	Author = {Cadar, Cristian and Ganesh, Vijay and Pawlowski, Peter M. and Dill, David L. and Engler, Dawson R.},
	Booktitle = {Proceedings of the ACM Conference on Computer and Communications Security (CCS)},
	Doi = {10.1145/1180405.1180445},
	Isbn = {1-59593-518-5},
	Keywords = {attack generation, bug finding, constraint solving, dynamic analysis, symbolic execution, test case generation},
	Location = {Alexandria, Virginia, USA},
	Numpages = {14},
	Pages = {322--335},
	Publisher = {ACM},
	Series = {CCS '06},
	Title = {EXE: Automatically Generating Inputs of Death},
	Url = {http://doi.acm.org/10.1145/1180405.1180445},
	Year = {2006},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/1180405.1180445},
	Bdsk-Url-2 = {https://doi.org/10.1145/1180405.1180445}}

@inproceedings{quintao2013fast,
	Author = {Quintao Pereira, Fernando Magno and Rodrigues, Raphael Ernani and Sperle Campos, Victor Hugo},
	Booktitle = {Proceedings of the  IEEE/ACM International Symposium on Code Generation and Optimization (CGO)},
	Organization = {IEEE Computer Society},
	Pages = {1--11},
	Title = {A fast and low-overhead technique to secure programs against integer overflows},
	Year = {2013}}

@misc{lejay2016,
	Author = {Stanislas Lejay},
	Note = {\url{https://thunderco.re/project/security/2016/07/18/fuzzing-ioctls/}},
	Title = {Fuzzing IOCTLs with angr},
	Year = {2016}}

@misc{zalewski2014strategies,
	Author = {Michal Zalewski},
	Note = {\url{https://lcamtuf.blogspot.com/2014/08/binary-fuzzing-strategies-what-works.html}},
	Title = {Binary fuzzing strategies: what works, what doesn't},
	Year = {2014}}

@misc{cve20170612,
	Note = {\url{https://source.android.com/security/bulletin/2017-05-01}},
	Title = {Android Security Bulletin---May 2017},
	Year = {2016}}

@misc{libfuzzergv,
	Author = {Vranken, Guido},
	Howpublished = {\url{https://guidovranken.wordpress.com/2017/07/08/libfuzzer-gv-new-techniques-for-dramatically-faster-fuzzing/}},
	Title = {libFuzzer-gv: new techniques for dramatically faster fuzzing},
	Type = {Blog},
	Year = {2017}}

@misc{cbmultios,
	Author = {{Trail of Bits}},
	Howpublished = {\url{https://github.com/trailofbits/cb-multios}},
	Title = {DARPA Challenge Binaries on Linux, OS X, and Windows},
	Year = {2016}}

@misc{cvewebkitsort,
	Author = {{CVE-2013-0997}},
	Howpublished = {\url{https://packetstormsecurity.com/files/123229/Apple-Security-Advisory-2013-09-12-2.html}},
	Year = 2013}

@misc{wang2017skyfire,
	Author = {Wang, Junjie and Chen, Bihuan and Wei, Lei and Liu, Yang},
	Publisher = {S\&P},
	Title = {Skyfire: Data-driven seed generation for fuzzing},
	Year = {2017}}

@misc{chromefuzzer,
	Author = {{The Chrome Project}},
	Note = {\url{https://www.chromium.org/Home/chromium-security/quarterly-updates#TOC-Q2-2015}},
	Title = {Quarterly Updates},
	Year = 2015}

@inproceedings{doupe10:blackbox,
	Author = {Adam Doup\'e and Marco Cova and Giovanni Vigna},
	Booktitle = dimva,
	Month = jul,
	Title = {{Why Johnny Can't Pentest: An Analysis of Black-box Web Vulnerability Scanners}},
	Year = 2010}

@inproceedings{bau10:state,
	Author = {Bau, J. and Bursztein, E. and Gupta, D. and Mitchell, J. C.},
	Booktitle = ieee-oakland,
	Title = {{State of the Art: Automated Black-Box Web Application Vulnerability Testing}},
	Year = {2010}}

@inproceedings{doupe12:enemy-of-the-state,
	Author = {Adam Doup\'e and Ludovico Cavedon and Christopher Kruegel and Giovanni Vigna},
	Booktitle = usenix-security,
	Month = aug,
	Title = {{Enemy of the State: A State-Aware Black-Box Vulnerability Scanner}},
	Year = 2012}

@article{miller1990empirical,
	Author = {Miller, Barton P and Fredriksen, Louis and So, Bryan},
	Journal = {Communications of the ACM},
	Number = {12},
	Pages = {32--44},
	Publisher = {ACM},
	Title = {An empirical study of the reliability of UNIX utilities},
	Volume = {33},
	Year = {1990}}

@inproceedings{wang2017skyfire,
	Author = {Junjie Wang and Bihuan Chen and Lei Wei and Yang Liu},
	Booktitle = ieee-oakland,
	Title = {{Skyfire: Data-Driven Seed Generation for Fuzzing}},
	Year = 2017}

@article{kleber2018survey,
	Author = {Kleber, Stephan and Maile, Lisa and Kargl, Frank},
	Journal = {IEEE Communications Surveys \& Tutorials},
	Publisher = {Universit{\"a}t Ulm},
	Title = {Survey of protocol reverse engineering algorithms: Decomposition of tools for static traffic analysis},
	Volume = {2018},
	Year = {2018}}

@inproceedings{DBLP:conf/usenix/Bellard05,
  author    = {Fabrice Bellard},
  title     = {QEMU, a Fast and Portable Dynamic Translator},
  booktitle = {Proceedings of the FREENIX},
  pages     = {41--46},
  publisher = {{USENIX}},
  year      = {2005},
  url       = {http://www.usenix.org/events/usenix05/tech/freenix/bellard.html},
  timestamp = {Mon, 01 Feb 2021 08:43:55 +0100},
  biburl    = {https://dblp.org/rec/conf/usenix/Bellard05.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}



@inproceedings{DBLP:conf/acsac/Dolan-GavittHHL15,
  author    = {Brendan Dolan{-}Gavitt and
               Josh Hodosh and
               Patrick Hulin and
               Tim Leek and
               Ryan Whelan},
  editor    = {Jeffrey Todd McDonald and
               Mila Dalla Preda and
               Natalia Stakhanova},
  title     = {Repeatable Reverse Engineering with {PANDA}},
  booktitle = {Proceedings of the 5th Program Protection and Reverse Engineering
               Workshop},
  pages     = {4:1--4:11},
  publisher = {{ACM}},
  year      = {2015},
  url       = {https://doi.org/10.1145/2843859.2843867},
  doi       = {10.1145/2843859.2843867},
  timestamp = {Tue, 06 Nov 2018 16:59:24 +0100},
  biburl    = {https://dblp.org/rec/conf/acsac/Dolan-GavittHHL15.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}



@inproceedings{DBLP:conf/woot/BuschWM20,
  author    = {Marcel Busch and
               Johannes Westphal and
               Tilo M{\"{u}}ller},
  editor    = {Yuval Yarom and
               Sarah Zennou},
  title     = {Unearthing the TrustedCore: {A} Critical Review on Huawei's Trusted
               Execution Environment},
  booktitle = {Proceedings of the Workshop on Offensive Technologies, {WOOT} },
  publisher = {{USENIX} Association},
  year      = {2020},
  url       = {https://www.usenix.org/conference/woot20/presentation/busch},
  timestamp = {Mon, 01 Feb 2021 08:41:54 +0100},
  biburl    = {https://dblp.org/rec/conf/woot/BuschWM20.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:conf/sigsoft/BabicBCIKKLSW19,
  author    = {Domagoj Babic and
               Stefan Bucur and
               Yaohui Chen and
               Franjo Ivancic and
               Tim King and
               Markus Kusano and
               Caroline Lemieux and
               L{\'{a}}szl{\'{o}} Szekeres and
               Wei Wang},
  editor    = {Marlon Dumas and
               Dietmar Pfahl and
               Sven Apel and
               Alessandra Russo},
  title     = {{FUDGE:} fuzz driver generation at scale},
  booktitle = {Proceedings of the ACM Joint Meeting on European Software Engineering
               Conference and Symposium on the Foundations of Software Engineering},
  pages     = {975--985},
  publisher = {{ACM}},
  year      = {2019},
  url       = {https://doi.org/10.1145/3338906.3340456},
  doi       = {10.1145/3338906.3340456},
  timestamp = {Fri, 09 Aug 2019 14:13:18 +0200},
  biburl    = {https://dblp.org/rec/conf/sigsoft/BabicBCIKKLSW19.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:conf/uss/IspoglouAMP20,
  author    = {Kyriakos K. Ispoglou and
               Daniel Austin and
               Vishwath Mohan and
               Mathias Payer},
  editor    = {Srdjan Capkun and
               Franziska Roesner},
  title     = {FuzzGen: Automatic Fuzzer Generation},
  booktitle = {Proceedings of the  USENIX Security Symposium (USENIX Security)},
  pages     = {2271--2287},
  publisher = {{USENIX} Association},
  year      = {2020},
  url       = {https://www.usenix.org/conference/usenixsecurity20/presentation/ispoglou},
  timestamp = {Fri, 29 Jan 2021 22:08:55 +0100},
  biburl    = {https://dblp.org/rec/conf/uss/IspoglouAMP20.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@misc{syzbot,
  title = {Syzbot},
  Howpublished = {\url{https://syzkaller.appspot.com/}}
}

@misc{joern,
  title = {Joern: open-source code analysis platform for {C/C++} based on code property graphs.},
  Howpublished = {\url{https://joern.io/}},	
}

@misc{codeql,
  title = {Code{QL}},
  Howpublished = {\url{https://codeql.github.com/}},	
}

@misc{gitpy,
  title = {gitpy},
  Howpublished = {\url{https://gitpython.readthedocs.io/en/stable/}}
}

@misc{difflib,
  title = {difflib},
  Howpublished = {\url{https://docs.python.org/3/library/difflib.html}}
}

@inproceedings{palikareva2016shadow,
  title={Shadow of a doubt: testing for divergences between software versions},
  author={Palikareva, Hristina and Kuchta, Tomasz and Cadar, Cristian},
  booktitle={Proceedings of the 38th International Conference on Software Engineering},
  pages={1181--1192},
  year={2016}
}

@inproceedings{noller2020hydiff,
  title={{HyDiff}: Hybrid differential software analysis},
  author={Noller, Yannic and P{\u{a}}s{\u{a}}reanu, Corina S and B{\"o}hme, Marcel and Sun, Youcheng and Nguyen, Hoang Lam and Grunske, Lars},
  booktitle={2020 IEEE/ACM 42nd International Conference on Software Engineering (ICSE)},
  pages={1273--1285},
  year={2020},
  organization={IEEE}
}

@inproceedings{aflchurn,
  title={Regression greybox fuzzing},
  author={Zhu, Xiaogang and B{\"o}hme, Marcel},
  booktitle={Proceedings of the 2021 ACM SIGSAC Conference on Computer and Communications Security},
  pages={2169--2182},
  year={2021}
}

@inproceedings{wang2021syzvegas,
  title={{SyzVegas}: Beating Kernel Fuzzing Odds with Reinforcement Learning},
  author={Wang, Daimeng and Zhang, Zheng and Zhang, Hang and Qian, Zhiyun and Krishnamurthy, Srikanth V and Abu-Ghazaleh, Nael},
  booktitle={30th USENIX Security Symposium (USENIX Security 21)},
  pages={2741--2758},
  year={2021}
}

@article{chipounov2011s2e,
  title={{S2E}: A platform for in-vivo multi-path analysis of software systems},
  author={Chipounov, Vitaly and Kuznetsov, Volodymyr and Candea, George},
  journal={Acm Sigplan Notices},
  volume={46},
  number={3},
  pages={265--278},
  year={2011},
  publisher={ACM New York, NY, USA}
}

@inproceedings{zhai2022progressive,
  title={Progressive Scrutiny: Incremental Detection of UBI bugs in the Linux Kernel},
  author={Zhai, Yizhuo and Hao, Yu and Zhang, Zheng and Chen, Weiteng and Li, Guoren and Qian, Zhiyun and Song, Chengyu and Sridharan, Manu and Krishnamurthy, Srikanth V and Jaeger, Trent and others},
  booktitle={2022 Network and Distributed System Security Symposium},
  year={2022}
}

@inproceedings{alexopoulos2022long,
  title={How Long Do Vulnerabilities Live in the Code? A {Large-Scale} Empirical Measurement Study on {FOSS} Vulnerability Lifetimes},
  author={Alexopoulos, Nikolaos and Brack, Manuel and Wagner, Jan Philipp and Grube, Tim and M{\"u}hlh{\"a}user, Max},
  booktitle={31st USENIX Security Symposium (USENIX Security 22)},
  pages={359--376},
  year={2022}
}

@inproceedings{blazytko2020aurora,
  author = {Tim Blazytko and Moritz Schl{\"o}gel and Cornelius Aschermann and Ali Abbasi and Joel Frank and Simon W{\"o}rner and Thorsten Holz},
  title = {{AURORA}: Statistical Crash Analysis for Automated Root Cause Explanation},
  year = {2020},
  booktitle =  {29th {USENIX} Security Symposium ({USENIX} Security 20)},
}

@INPROCEEDINGS{xie2010specfault,
  author={Xie, Xiaoyuan and Chen, Tsong Yueh and Xu, Baowen},
  booktitle={2010 10th International Conference on Quality Software}, 
  title={Isolating Suspiciousness from Spectrum-Based Fault Localization Techniques}, 
  year={2010},
  volume={},
  number={},
  pages={385-392},
  doi={10.1109/QSIC.2010.45}
}

@inproceedings{cui2016retracer,
	author = {Cui, Weidong and Peinado, Marcus and Cha, Sang Kil and Fratantonio, Yanick and Kemerlis, Vasileios P.},
	title = {RETracer: Triaging Crashes by Reverse Execution from Partial Memory Dumps},
	year = {2016},
	isbn = {9781450339001},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/2884781.2884844},
	doi = {10.1145/2884781.2884844},
	abstract = {Many software providers operate crash reporting services to automatically collect crashes from millions of customers and file bug reports. Precisely triaging crashes is necessary and important for software providers because the millions of crashes that may be reported every day are critical in identifying high impact bugs. However, the triaging accuracy of existing systems is limited, as they rely only on the syntactic information of the stack trace at the moment of a crash without analyzing program semantics.In this paper, we present RETracer, the first system to triage software crashes based on program semantics reconstructed from memory dumps. RETracer was designed to meet the requirements of large-scale crash reporting services. RETracer performs binary-level backward taint analysis without a recorded execution trace to understand how functions on the stack contribute to the crash. The main challenge is that the machine state at an earlier time cannot be recovered completely from a memory dump, since most instructions are information destroying.We have implemented RETracer for x86 and x86-64 native code, and compared it with the existing crash triaging tool used by Microsoft. We found that RETracer eliminates two thirds of triage errors based on a manual analysis of 140 bugs fixed in Microsoft Windows and Office. RETracer has been deployed as the main crash triaging system on Microsoft's crash reporting service.},
	booktitle = {Proceedings of the 38th International Conference on Software Engineering},
	pages = {820–831},
	numpages = {12},
	keywords = {reverse execution, triaging, backward taint analysis},
	location = {Austin, Texas},
	series = {ICSE '16}
}

@article{xu2013javafault,
	author = {Xu, Jian and Zhang, Zhenyu and Chan, W. K. and Tse, T. H. and Li, Shanping},
	title = {A General Noise-Reduction Framework for Fault Localization of Java Programs},
	year = {2013},
	issue_date = {May, 2013},
	publisher = {Butterworth-Heinemann},
	address = {USA},
	volume = {55},
	number = {5},
	issn = {0950-5849},
	url = {https://doi.org/10.1016/j.infsof.2012.08.006},
	doi = {10.1016/j.infsof.2012.08.006},
	abstract = {Context: Existing fault-localization techniques combine various program features and similarity coefficients with the aim of precisely assessing the similarities among the dynamic spectra of these program features to predict the locations of faults. Many such techniques estimate the probability of a particular program feature causing the observed failures. They often ignore the noise introduced by other features on the same set of executions that may lead to the observed failures. It is unclear to what extent such noise can be alleviated. Objective: This paper aims to develop a framework that reduces the noise in fault-failure correlation measurements. Method: We develop a fault-localization framework that uses chains of key basic blocks as program features and a noise-reduction methodology to improve on the similarity coefficients of fault-localization techniques. We evaluate our framework on five base techniques using five real-life median-scaled programs in different application domains. We also conduct a case study on subjects with multiple faults. Results: The experimental result shows that the synthesized techniques are more effective than their base techniques by almost 10\%. Moreover, their runtime overhead factors to collect the required feature values are practical. The case study also shows that the synthesized techniques work well on subjects with multiple faults. Conclusion: We conclude that the proposed framework has a significant and positive effect on improving the effectiveness of the corresponding base techniques.},
	journal = {Inf. Softw. Technol.},
	month = {may},
	pages = {880–896},
	numpages = {17},
	keywords = {Fault localization, Program debugging, Noise reduction, Key block chain}
}

@inproceedings{yagemann2021symanal,
	author = {Yagemann, Carter and Chung, Simon P. and Saltaformaggio, Brendan and Lee, Wenke},
	title = {Automated Bug Hunting With Data-Driven Symbolic Root Cause Analysis},
	year = {2021},
	isbn = {9781450384544},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3460120.3485363},
	doi = {10.1145/3460120.3485363},
	abstract = {The increasing cost of successful cyberattacks has caused a mindset shift, whereby defenders now employ proactive defenses, namely software bug hunting, alongside existing reactive measures (firewalls, IDS, IPS) to protect systems. Unfortunately the path from hunting bugs to deploying patches remains laborious and expensive, requires human expertise, and still misses serious memory corruptions. Motivated by these challenges, we propose bug hunting using symbolically reconstructed states based on execution traces to achieve better detection and root cause analysis of overflow, use-after-free, double free, and format string bugs across user programs and their imported libraries. We discover that with the right use of widely available hardware processor tracing and partial memory snapshots, powerful symbolic analysis can be used on real-world programs while managing path explosion. Better yet, data can be captured from production deployments of live software on end-host systems transparently, aiding in the analysis of user clients and long-running programs like web servers.We implement a prototype of our design, Bunkerbuster, for Linux and evaluate it on 15 programs, where it finds 39 instances of our target bug classes, 8 of which have never before been reported and have lead to 1 EDB and 3 CVE IDs being issued. These 0-days were patched by developers using Bunkerbuster's reports, independently validating their usefulness. In a side-by-side comparison, our system uncovers 8 bugs missed by AFL and QSYM, and correctly classifies 4 that were previously detected, but mislabeled by AddressSanitizer. Our prototype accomplishes this with 7.21\% recording overhead.},
	booktitle = {Proceedings of the 2021 ACM SIGSAC Conference on Computer and Communications Security},
	pages = {320–336},
	numpages = {17},
	keywords = {bug hunting, symbolic analysis, processor tracing},
	location = {Virtual Event, Republic of Korea},
	series = {CCS '21}
}

@inproceedings{lattner2004llvm,
  title={{LLVM}: A compilation framework for lifelong program analysis \& transformation},
  author={Lattner, Chris and Adve, Vikram},
  booktitle={International Symposium on Code Generation and Optimization, 2004. CGO 2004.},
  pages={75--86},
  year={2004},
  organization={IEEE}
}

@inproceedings{pailoor2018moonshine,
  title={{MoonShine}: Optimizing {OS} Fuzzer Seed Selection with Trace Distillation},
  author={Pailoor, Shankara and Aday, Andrew and Jana, Suman},
  booktitle={27th USENIX Security Symposium (USENIX Security 18)},
  pages={729--743},
  year={2018}
}

@inproceedings{kim2020hfl,
  title={{HFL}: Hybrid Fuzzing on the Linux Kernel.},
  author={Kim, Kyungtae and Jeong, Dae R and Kim, Chung Hwan and Jang, Yeongjin and Shin, Insik and Lee, Byoungyoung},
  booktitle={NDSS},
  year={2020}
}

@inproceedings{schumilo2017kafl,
	author = {Schumilo, Sergej and Aschermann, Cornelius and Gawlik, Robert and Schinzel, Sebastian and Holz, Thorsten},
	title = {KAFL: Hardware-Assisted Feedback Fuzzing for OS Kernels},
	year = {2017},
	isbn = {9781931971409},
	publisher = {USENIX Association},
	address = {USA},
	abstract = {Many kinds of memory safety vulnerabilities have been endangering software systems for decades. Amongst other approaches, fuzzing is a promising technique to unveil various software faults. Recently, feedback-guided fuzzing demonstrated its power, producing a steady stream of security-critical software bugs. Most fuzzing efforts--especially feedback fuzzing--are limited to user space components of an operating system (OS), although bugs in kernel components are more severe, because they allow an attacker to gain access to a system with full privileges. Unfortunately, kernel components are difficult to fuzz as feedback mechanisms (i.e., guided code coverage) cannot be easily applied. Additionally, non-determinism due to interrupts, kernel threads, statefulness, and similar mechanisms poses problems. Furthermore, if a process fuzzes its own kernel, a kernel crash highly impacts the performance of the fuzzer as the OS needs to reboot.In this paper, we approach the problem of coverageguided kernel fuzzing in an OS-independent and hardware-assisted way: We utilize a hypervisor and Intel's Processor Trace (PT) technology. This allows us to remain independent of the target OS as we just require a small user space component that interacts with the targeted OS. As a result, our approach introduces almost no performance overhead, even in cases where the OS crashes, and performs up to 17,000 executions per second on an off-the-shelf laptop. We developed a framework called kernel-AFL (kAFL) to assess the security of Linux, macOS, and Windows kernel components. Among many crashes, we uncovered several flaws in the ext4 driver for Linux, the HFS and APFS file system of macOS, and the NTFS driver of Windows.},
	booktitle = {Proceedings of the 26th USENIX Conference on Security Symposium},
	pages = {167–182},
	numpages = {16},
	location = {Vancouver, BC, Canada},
	series = {SEC'17}
}

@inproceedings{sun2021healer,
	author = {Sun, Hao and Shen, Yuheng and Wang, Cong and Liu, Jianzhong and Jiang, Yu and Chen, Ting and Cui, Aiguo},
	title = {HEALER: Relation Learning Guided Kernel Fuzzing},
	year = {2021},
	isbn = {9781450387095},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3477132.3483547},
	doi = {10.1145/3477132.3483547},
	abstract = {Modern operating system kernels are too complex to be free of bugs. Fuzzing is a promising approach for vulnerability detection and has been applied to kernel testing. However, existing work does not consider the influence relations between system calls when generating and mutating inputs, resulting in difficulties when trying to reach into the kernel's deeper logic effectively.In this paper, we propose HEALER, a kernel fuzzer that improves fuzzing's effectiveness by utilizing system call relation learning. HEALER learns the influence relations between system calls by dynamically analyzing minimized test cases. Then, HEALER utilizes the learned relations to guide input generation and mutation, which improves the quality of test cases and the effectiveness of fuzzing. We implemented HEALER and evaluated its performance on recent versions of the Linux kernel. Compared to state-of-the-art kernel fuzzers such as Syzkaller and Moonshine, HEALER improves branch coverage by 28\% and 21\%, while achieving a speedup of 2.2x and 1.8x, respectively. In addition, HEALER detected 218 vulnerabilities, 33 of which are previously unknown and have been confirmed by the corresponding kernel maintainers.},
	booktitle = {Proceedings of the ACM SIGOPS 28th Symposium on Operating Systems Principles},
	pages = {344–358},
	numpages = {15},
	keywords = {System Call Relation Learning, Kernel Fuzzing},
	location = {Virtual Event, Germany},
	series = {SOSP '21}
}

@inproceedings{choi2021ntfuzz,
  author={Choi, Jaeseung and Kim, Kangsu and Lee, Daejin and Cha, Sang Kil},
  booktitle={2021 IEEE Symposium on Security and Privacy (SP)}, 
  title={NtFuzz: Enabling Type-Aware Kernel Fuzzing on Windows with Static Binary Analysis}, 
  year={2021},
  volume={},
  number={},
  pages={677-693},
  doi={10.1109/SP40001.2021.00114}
}

@inproceedings{song2019periscope,
  title={{PeriScope}: An Effective Probing and Fuzzing Framework for the Hardware-{OS} Boundary},
	author={Song, Dokyung and Hetzelt, Felicitas and Das, Dipanjan and Spensky, Chad and Na, Yeoul and Volckaert, Stijn and Vigna, Giovanni and Kruegel, Christopher and Seifert, Jean-Pierre and Franz, Michael},
  booktitle={Network and Distributed System Security Symposium (NDSS)},
  year={2019}
}

@inproceedings{peng2020usbfuzz,
	author = {Peng, Hui and Payer, Mathias},
	title = {USBFuzz: A Framework for Fuzzing USB Drivers by Device Emulation},
	year = {2020},
	isbn = {978-1-939133-17-5},
	publisher = {USENIX Association},
	address = {USA},
	abstract = {The Universal Serial Bus (USB) connects external devices to a host. This interface exposes the OS kernels and device drivers to attacks by malicious devices. Unfortunately, kernels and drivers were developed under a security model that implicitly trusts connected devices. Drivers expect faulty hardware but not malicious attacks. Similarly, security testing drivers is challenging as input must cross the hardware/software barrier. Fuzzing, the most widely used bug finding technique, relies on providing random data to programs. However, fuzzing device drivers is challenging due to the difficulty in crossing the hardware/software barrier and providing random device data to the driver under test.We present USBFuzz, a portable, flexible, and modular framework for fuzz testing USB drivers. At its core, USBFuzz uses a software-emulated USB device to provide random device data to drivers (when they perform IO operations). As the emulated USB device works at the device level, porting it to other platforms is straight-forward. Using the USBFuzz framework, we apply (i) coverage-guided fuzzing to a broad range of USB drivers in the Linux kernel; (ii) dumb fuzzing in FreeBSD, MacOS, and Windows through cross-pollination seeded by the Linux inputs; and (iii) focused fuzzing of a USB webcam driver. USBFuzz discovered a total of 26 new bugs, including 16 memory bugs of high security impact in various Linux subsystems (USB core, USB sound, and network), one bug in FreeBSD, three in MacOS (two resulting in an unplanned reboot and one freezing the system), and four in Windows 8 and Windows 10 (resulting in Blue Screens of Death), and one bug in the Linux USB host controller driver and another one in a USB camera driver. From the Linux bugs, we have fixed and upstreamed 11 bugs and received 10 CVEs.},
	booktitle = {Proceedings of the 29th USENIX Conference on Security Symposium},
	articleno = {144},
	numpages = {17},
	series = {SEC'20}
}

@inproceedings{bohme2017aflgo,
	author = {B\"{o}hme, Marcel and Pham, Van-Thuan and Nguyen, Manh-Dung and Roychoudhury, Abhik},
	title = {Directed Greybox Fuzzing},
	year = {2017},
	isbn = {9781450349468},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3133956.3134020},
	doi = {10.1145/3133956.3134020},
	abstract = {Existing Greybox Fuzzers (GF) cannot be effectively directed, for instance, towards problematic changes or patches, towards critical system calls or dangerous locations, or towards functions in the stack-trace of a reported vulnerability that we wish to reproduce. In this paper, we introduce Directed Greybox Fuzzing (DGF) which generates inputs with the objective of reaching a given set of target program locations efficiently. We develop and evaluate a simulated annealing-based power schedule that gradually assigns more energy to seeds that are closer to the target locations while reducing energy for seeds that are further away. Experiments with our implementation AFLGo demonstrate that DGF outperforms both directed symbolic-execution-based whitebox fuzzing and undirected greybox fuzzing. We show applications of DGF to patch testing and crash reproduction, and discuss the integration of AFLGo into Google's continuous fuzzing platform OSS-Fuzz. Due to its directedness, AFLGo could find 39 bugs in several well-fuzzed, security-critical projects like LibXML2. 17 CVEs were assigned.},
	booktitle = {Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security},
	pages = {2329–2344},
	numpages = {16},
	keywords = {verifying true positives, patch testing, crash reproduction, reachability, directed testing, coverage-based greybox fuzzing},
	location = {Dallas, Texas, USA},
	series = {CCS '17}
}

@inproceedings{chen2018hawkeye,
	author = {Chen, Hongxu and Xue, Yinxing and Li, Yuekang and Chen, Bihuan and Xie, Xiaofei and Wu, Xiuheng and Liu, Yang},
	title = {Hawkeye: Towards a Desired Directed Grey-Box Fuzzer},
	year = {2018},
	isbn = {9781450356930},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3243734.3243849},
	doi = {10.1145/3243734.3243849},
	abstract = {Grey-box fuzzing is a practically effective approach to test real-world programs. However, most existing grey-box fuzzers lack directedness, i.e. the capability of executing towards user-specified target sites in the program. To emphasize existing challenges in directed fuzzing, we propose Hawkeye to feature four desired properties of directed grey-box fuzzers. Owing to a novel static analysis on the program under test and the target sites, Hawkeye precisely collects the information such as the call graph, function and basic block level distances to the targets. During fuzzing, Hawkeye evaluates exercised seeds based on both static information and the execution traces to generate the dynamic metrics, which are then used for seed prioritization, power scheduling and adaptive mutating. These strategies help Hawkeye to achieve better directedness and gravitate towards the target sites. We implemented Hawkeye as a fuzzing framework and evaluated it on various real-world programs under different scenarios. The experimental results showed that Hawkeye can reach the target sites and reproduce the crashes much faster than state-of-the-art grey-box fuzzers such as AFL and AFLGo. Specially, Hawkeye can reduce the time to exposure for certain vulnerabilities from about 3.5 hours to 0.5 hour. By now, Hawkeye has detected more than 41 previously unknown crashes in projects such as Oniguruma, MJS with the target sites provided by vulnerability prediction tools; all these crashes are confirmed and 15 of them have been assigned CVE IDs.},
	booktitle = {Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security},
	pages = {2095–2108},
	numpages = {14},
	keywords = {fuzz testing, static analysis},
	location = {Toronto, Canada},
	series = {CCS '18}
}

@inproceedings{osterlund2020parmesan,
	author = {\"{O}sterlund, Sebastian and Razavi, Kaveh and Bos, Herbert and Giuffrida, Cristiano},
	title = {ParmeSan: Sanitizer-Guided Greybox Fuzzing},
	year = {2020},
	isbn = {978-1-939133-17-5},
	publisher = {USENIX Association},
	address = {USA},
	abstract = {One of the key questions when fuzzing is where to look for vulnerabilities. Coverage-guided fuzzers indiscriminately optimize for covering as much code as possible given that bug coverage often correlates with code coverage. Since code coverage overapproximates bug coverage, this approach is less than ideal and may lead to non-trivial time-to-exposure (TTE) of bugs. Directed fuzzers try to address this problem by directing the fuzzer to a basic block with a potential vulnerability. This approach can greatly reduce the TTE for a specific bug, but such special-purpose fuzzers can then greatly underapproximate overall bug coverage.In this paper, we present sanitizer-guided fuzzing, a new design point in this space that specifically optimizes for bug coverage. For this purpose, we make the key observation that while the instrumentation performed by existing software sanitizers are regularly used for detecting fuzzer-induced error conditions, they can further serve as a generic and effective mechanism to identify interesting basic blocks for guiding fuzzers. We present the design and implementation of ParmeSan, a new sanitizer-guided fuzzer that builds on this observation. We show that ParmeSan greatly reduces the TTE of real-world bugs, and finds bugs 37\% faster than existing state-of-the-art coverage-based fuzzers (Angora) and 288\% faster than directed fuzzers (AFLGo), while still covering the same set of bugs.},
	booktitle = {Proceedings of the 29th USENIX Conference on Security Symposium},
	articleno = {129},
	numpages = {18},
	series = {SEC'20}
}

@inproceedings{canakci2022targetfuzz,
	author = {Canakci, Sadullah and Matyunin, Nikolay and Graffi, Kalman and Joshi, Ajay and Egele, Manuel},
	title = {TargetFuzz: Using DARTs to Guide Directed Greybox Fuzzers},
	year = {2022},
	isbn = {9781450391405},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3488932.3501276},
	doi = {10.1145/3488932.3501276},
	booktitle = {Proceedings of the 2022 ACM on Asia Conference on Computer and Communications Security},
	pages = {561–573},
	numpages = {13},
	keywords = {seed corpus, directed greybox fuzzing, seed selection strategy, patch testing, coverage-based greybox fuzzing},
	location = {Nagasaki, Japan},
	series = {ASIA CCS '22}
}

@inproceedings{you2017semfuzz,
	author = {You, Wei and Zong, Peiyuan and Chen, Kai and Wang, XiaoFeng and Liao, Xiaojing and Bian, Pan and Liang, Bin},
	title = {SemFuzz: Semantics-Based Automatic Generation of Proof-of-Concept Exploits},
	year = {2017},
	isbn = {9781450349468},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3133956.3134085},
	doi = {10.1145/3133956.3134085},
	booktitle = {Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security},
	pages = {2139–2154},
	numpages = {16},
	keywords = {patch, semantics, exploit generation, fuzzing, vulnerability},
	location = {Dallas, Texas, USA},
	series = {CCS '17}
}

@inproceedings{brown2020sys,
	author = {Brown, Fraser and Stefan, Deian and Engler, Dawson},
	title = {Sys: A Static/Symbolic Tool for Finding Good Bugs in Good (Browser) Code},
	year = {2020},
	isbn = {978-1-939133-17-5},
	publisher = {USENIX Association},
	address = {USA},
	abstract = {We describe and evaluate an extensible bug-finding tool, Sys, designed to automatically find security bugs in huge codebases, even when easy-to-find bugs have been already picked clean by years of aggressive automatic checking. Sys uses a two-step approach to find such tricky errors. First, it breaks down large--tens of millions of lines--systems into small pieces using user-extensible static checkers to quickly find and mark potential errorsites. Second, it uses user-extensible symbolic execution to deeply examine these potential errorsites for actual bugs. Both the checkers and the system itself are small (6KLOC total). Sys is flexible, because users must be able to exploit domain- or system-specific knowledge in order to detect errors and suppress false positives in real codebases. Sys finds many security bugs (51 bugs, 43 confirmed) in wellchecked code--the Chrome and Firefox web browsers--and code that some symbolic tools struggle with--the FreeBSD operating system. Sys's most interesting results include: an exploitable, cash bountied CVE in Chrome that was fixed in seven hours (and whose patch was backported in two days); a trio of bountied bugs with a CVE in Firefox; and a bountied bug in Chrome's audio support.},
	booktitle = {Proceedings of the 29th USENIX Conference on Security Symposium},
	articleno = {12},
	numpages = {18},
	series = {SEC'20}
}

@inproceedings{zheng2021d2a,
	author = {Zheng, Yunhui and Pujar, Saurabh and Lewis, Burn and Buratti, Luca and Epstein, Edward and Yang, Bo and Laredo, Jim and Morari, Alessandro and Su, Zhong},
	title = {D2A: A Dataset Built for AI-Based Vulnerability Detection Methods Using Differential Analysis},
	year = {2021},
	isbn = {9780738146690},
	publisher = {IEEE Press},
	url = {https://doi.org/10.1109/ICSE-SEIP52600.2021.00020},
	doi = {10.1109/ICSE-SEIP52600.2021.00020},
	abstract = {Static analysis tools are widely used for vulnerability detection as they understand programs with complex behavior and millions of lines of code. Despite their popularity, static analysis tools are known to generate an excess of false positives. The recent ability of Machine Learning models to understand programming languages opens new possibilities when applied to static analysis. However, existing datasets to train models for vulnerability identification suffer from multiple limitations such as limited bug context, limited size, and synthetic and unrealistic source code. We propose D2A, a differential analysis based approach to label issues reported by static analysis tools. The D2A dataset is built by analyzing version pairs from multiple open source projects. From each project, we select bug fixing commits and we run static analysis on the versions before and after such commits. If some issues detected in a before-commit version disappear in the corresponding after-commit version, they are very likely to be real bugs that got fixed by the commit. We use D2A to generate a large labeled dataset to train models for vulnerability identification. We show that the dataset can be used to build a classifier to identify possible false alarms among the issues reported by static analysis, hence helping developers prioritize and investigate potential true positives first.},
	booktitle = {Proceedings of the 43rd International Conference on Software Engineering: Software Engineering in Practice},
	pages = {111–120},
	numpages = {10},
	keywords = {auto-labeler, dataset, vulnerability detection},
	location = {Virtual Event, Spain},
	series = {ICSE-SEIP '21}
}

@inproceedings{petsios2017nezha,
  author={Petsios, Theofilos and Tang, Adrian and Stolfo, Salvatore and Keromytis, Angelos D. and Jana, Suman},
  booktitle={2017 IEEE Symposium on Security and Privacy (SP)}, 
  title={NEZHA: Efficient Domain-Independent Differential Testing}, 
  year={2017},
  volume={},
  number={},
  pages={615-632},
  doi={10.1109/SP.2017.27}
}

@inproceedings{kim2023patchverif,
	author={Kim, Hyungsub and Ozmen, Muslum Ozgur and Celik, Z. Berkay and Bianchi, Antonio and Xu, Dongyan},
	booktitle = {Proceedings of the 32nd USENIX Conference on Security Symposium [Prepublication]},
	title={PatchVerif: Discovering Faulty Patches in Robotic Vehicles},
	publisher = {USENIX Association},
	year={2023},
	series={SEC'23}
}

@inproceedings{cao2022mvd,
	author = {Cao, Sicong and Sun, Xiaobing and Bo, Lili and Wu, Rongxin and Li, Bin and Tao, Chuanqi},
	title = {MVD: Memory-Related Vulnerability Detection Based on Flow-Sensitive Graph Neural Networks},
	year = {2022},
	isbn = {9781450392211},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3510003.3510219},
	doi = {10.1145/3510003.3510219},
	abstract = {Memory-related vulnerabilities constitute severe threats to the security of modern software. Despite the success of deep learning-based approaches to generic vulnerability detection, they are still limited by the underutilization of flow information when applied for detecting memory-related vulnerabilities, leading to high false positives.In this paper, we propose MVD, a statement-level <u>M</u>emory-related <u>V</u>ulnerability <u>D</u>etection approach based on flow-sensitive graph neural networks (FS-GNN). FS-GNN is employed to jointly embed both unstructured information (i.e., source code) and structured information (i.e., control- and data-flow) to capture implicit memory-related vulnerability patterns. We evaluate MVD on the dataset which contains 4,353 real-world memory-related vulnerabilities, and compare our approach with three state-of-the-art deep learning-based approaches as well as five popular static analysis-based memory detectors. The experiment results show that MVD achieves better detection accuracy, outperforming both state-of-the-art DL-based and static analysis-based approaches. Furthermore, MVD makes a great trade-off between accuracy and efficiency.},
	booktitle = {Proceedings of the 44th International Conference on Software Engineering},
	pages = {1456–1468},
	numpages = {13},
	keywords = {vulnerability detection, flow analysis, memory-related vulnerability, graph neural networks},
	location = {Pittsburgh, Pennsylvania},
	series = {ICSE '22}
}

@inproceedings{wu2022vulcnn,
	author = {Wu, Yueming and Zou, Deqing and Dou, Shihan and Yang, Wei and Xu, Duo and Jin, Hai},
	title = {VulCNN: An Image-Inspired Scalable Vulnerability Detection System},
	year = {2022},
	isbn = {9781450392211},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3510003.3510229},
	doi = {10.1145/3510003.3510229},
	abstract = {Since deep learning (DL) can automatically learn features from source code, it has been widely used to detect source code vulnerability. To achieve scalable vulnerability scanning, some prior studies intend to process the source code directly by treating them as text. To achieve accurate vulnerability detection, other approaches consider distilling the program semantics into graph representations and using them to detect vulnerability. In practice, text-based techniques are scalable but not accurate due to the lack of program semantics. Graph-based methods are accurate but not scalable since graph analysis is typically time-consuming.In this paper, we aim to achieve both scalability and accuracy on scanning large-scale source code vulnerabilities. Inspired by existing DL-based image classification which has the ability to analyze millions of images accurately, we prefer to use these techniques to accomplish our purpose. Specifically, we propose a novel idea that can efficiently convert the source code of a function into an image while preserving the program details. We implement VulCNN and evaluate it on a dataset of 13,687 vulnerable functions and 26,970 non-vulnerable functions. Experimental results report that VulCNN can achieve better accuracy than eight state-of-the-art vulnerability detectors (i.e., Checkmarx, FlawFinder, RATS, TokenCNN, VulDeePecker, SySeVR, VulDeeLocator, and Devign). As for scalability, VulCNN is about four times faster than VulDeePecker and SySeVR, about 15 times faster than VulDeeLocator, and about six times faster than Devign. Furthermore, we conduct a case study on more than 25 million lines of code and the result indicates that VulCNN can detect large-scale vulnerability. Through the scanning reports, we finally discover 73 vulnerabilities that are not reported in NVD.},
	booktitle = {Proceedings of the 44th International Conference on Software Engineering},
	pages = {2365–2376},
	numpages = {12},
	keywords = {vulnerability detection, CNN, image, large scale},
	location = {Pittsburgh, Pennsylvania},
	series = {ICSE '22}
}

@inbook{zhou2019devign,
	author = {Zhou, Yaqin and Liu, Shangqing and Siow, Jingkai and Du, Xiaoning and Liu, Yang},
	title = {Devign: Effective Vulnerability Identification by Learning Comprehensive Program Semantics via Graph Neural Networks},
	year = {2019},
	publisher = {Curran Associates Inc.},
	address = {Red Hook, NY, USA},
	abstract = {Vulnerability identification is crucial to protect the software systems from attacks for cyber security. It is especially important to localize the vulnerable functions among the source code to facilitate the fix. However, it is a challenging and tedious process, and also requires specialized security expertise. Inspired by the work on manually-defined patterns of vulnerabilities from various code representation graphs and the recent advance on graph neural networks, we propose Devign, a general graph neural network based model for graph-level classification through learning on a rich set of code semantic representations. It includes a novel Conv module to efficiently extract useful features in the learned rich node representations for graph-level classification. The model is trained over manually labeled datasets built on 4 diversified large-scale open-source C projects that incorporate high complexity and variety of real source code instead of synthesis code used in previous works. The results of the extensive evaluation on the datasets demonstrate that Devign outperforms the state of the arts significantly with an average of 10.51\% higher accuracy and 8.68\% F1 score, increases averagely 4.66\% accuracy and 6.37\% F1 by the Conv module.},
	booktitle = {Proceedings of the 33rd International Conference on Neural Information Processing Systems},
	articleno = {915},
	numpages = {11}
}

@inproceedings{wang2019zday,
  author={Wang, Xinda and Sun, Kun and Batcheller, Archer and Jajodia, Sushil},
  booktitle={2019 49th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)}, 
  title={Detecting "0-Day" Vulnerability: An Empirical Study of Secret Security Patch in OSS}, 
  year={2019},
  volume={},
  number={},
  pages={485-492},
  doi={10.1109/DSN.2019.00056}
}

@inproceedings{li2018vuldeep,
	author    = {Zhen Li and Deqing Zou and Shouhuai Xu and Xinyu Ou and Hai Jin and Sujuan Wang and Zhijun Deng and Yuyi Zhong},
  title     = {VulDeePecker: {A} Deep Learning-Based System for Vulnerability Detection},
  booktitle = {25th Annual Network and Distributed System Security Symposium, {NDSS}
               2018, San Diego, California, USA, February 18-21, 2018},
  publisher = {The Internet Society},
  year      = {2018},
  url       = {http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/2018/02/ndss2018\_03A-2\_Li\_paper.pdf},
  timestamp = {Thu, 17 Jun 2021 16:04:48 +0200},
  biburl    = {https://dblp.org/rec/conf/ndss/LiZXO0WDZ18.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{pang2015ngram,
  author={Pang, Yulei and Xue, Xiaozhen and Namin, Akbar Siami},
  booktitle={2015 IEEE 14th International Conference on Machine Learning and Applications (ICMLA)}, 
  title={Predicting Vulnerable Software Components through N-Gram Analysis and Statistical Feature Selection}, 
  year={2015},
  volume={},
  number={},
  pages={543-548},
  doi={10.1109/ICMLA.2015.99}
}

@inproceedings{hovsepyan2012text,
	author = {Hovsepyan, Aram and Scandariato, Riccardo and Joosen, Wouter and Walden, James},
	title = {Software Vulnerability Prediction Using Text Analysis Techniques},
	year = {2012},
	isbn = {9781450315081},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/2372225.2372230},
	doi = {10.1145/2372225.2372230},
	abstract = {Early identification of software vulnerabilities is essential in software engineering and can help reduce not only costs, but also prevent loss of reputation and damaging litigations for a software firm. Techniques and tools for software vulnerability prediction are thus invaluable. Most of the existing techniques rely on using component characteristic(s) (like code complexity, code churn) for the vulnerability prediction. In this position paper, we present a novel approach for vulnerability prediction that leverages on the analysis of raw source code as text, instead of using "cooked" features. Our initial results seem to be very promising as the prediction model achieves an average accuracy of 0.87, precision of 0.85 and recall of 0.88 on 18 versions of a large mobile application.},
	booktitle = {Proceedings of the 4th International Workshop on Security Measurements and Metrics},
	pages = {7–10},
	numpages = {4},
	keywords = {machine learning, text analysis, vulnerability prediction},
	location = {Lund, Sweden},
	series = {MetriSec '12}
}

@inproceedings{zeng2021lapredict,
	author = {Zeng, Zhengran and Zhang, Yuqun and Zhang, Haotian and Zhang, Lingming},
	title = {Deep Just-in-Time Defect Prediction: How Far Are We?},
	year = {2021},
	isbn = {9781450384599},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3460319.3464819},
	doi = {10.1145/3460319.3464819},
	abstract = {Defect prediction aims to automatically identify potential defective code with minimal human intervention and has been widely studied in the literature. Just-in-Time (JIT) defect prediction focuses on program changes rather than whole programs, and has been widely adopted in continuous testing. CC2Vec, state-of-the-art JIT defect prediction tool, first constructs a hierarchical attention network (HAN) to learn distributed vector representations of both code additions and deletions, and then concatenates them with two other embedding vectors representing commit messages and overall code changes extracted by the existing DeepJIT approach to train a model for predicting whether a given commit is defective. Although CC2Vec has been shown to be the state of the art for JIT defect prediction, it was only evaluated on a limited dataset and not compared with all representative baselines. Therefore, to further investigate the efficacy and limitations of CC2Vec, this paper performs an extensive study of CC2Vec on a large-scale dataset with over 310,370 changes (8.3 X larger than the original CC2Vec dataset). More specifically, we also empirically compare CC2Vec against DeepJIT and representative traditional JIT defect prediction techniques. The experimental results show that CC2Vec cannot consistently outperform DeepJIT, and neither of them can consistently outperform traditional JIT defect prediction. We also investigate the impact of individual traditional defect prediction features and find that the added-line-number feature outperforms other traditional features. Inspired by this finding, we construct a simplistic JIT defect prediction approach which simply adopts the added-line-number feature with the logistic regression classifier. Surprisingly, such a simplistic approach can outperform CC2Vec and DeepJIT in defect prediction, and can be 81k X/120k X faster in training/testing. Furthermore, the paper also provides various practical guidelines for advancing JIT defect prediction in the near future.},
	booktitle = {Proceedings of the 30th ACM SIGSOFT International Symposium on Software Testing and Analysis},
	pages = {427–438},
	numpages = {12},
	keywords = {Deep Learning, Just-In-Time Prediction, Software Defect Prediction},
	location = {Virtual, Denmark},
	series = {ISSTA 2021}
}

@inproceedings{hoang2020cc2vec,
	author = {Hoang, Thong and Kang, Hong Jin and Lo, David and Lawall, Julia},
	title = {CC2Vec: Distributed Representations of Code Changes},
	year = {2020},
	isbn = {9781450371216},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3377811.3380361},
	doi = {10.1145/3377811.3380361},
	abstract = {Existing work on software patches often use features specific to a single task. These works often rely on manually identified features, and human effort is required to identify these features for each task. In this work, we propose CC2Vec, a neural network model that learns a representation of code changes guided by their accompanying log messages, which represent the semantic intent of the code changes. CC2Vec models the hierarchical structure of a code change with the help of the attention mechanism and uses multiple comparison functions to identify the differences between the removed and added code.To evaluate if CC2Vec can produce a distributed representation of code changes that is general and useful for multiple tasks on software patches, we use the vectors produced by CC2Vec for three tasks: log message generation, bug fixing patch identification, and just-in-time defect prediction. In all tasks, the models using CC2Vec outperform the state-of-the-art techniques.},
	booktitle = {Proceedings of the ACM/IEEE 42nd International Conference on Software Engineering},
	pages = {518–529},
	numpages = {12},
	location = {Seoul, South Korea},
	series = {ICSE '20}
}

@INPROCEEDINGS{hoang2019deepjit,
  author={Hoang, Thong and Khanh Dam, Hoa and Kamei, Yasutaka and Lo, David and Ubayashi, Naoyasu},
  booktitle={2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR)}, 
  title={DeepJIT: An End-to-End Deep Learning Framework for Just-in-Time Defect Prediction}, 
  year={2019},
  volume={},
  number={},
  pages={34-45},
  doi={10.1109/MSR.2019.00016}
}

@inproceedings{ciborowska2022bert,
	author = {Ciborowska, Agnieszka and Damevski, Kostadin},
	title = {Fast Changeset-Based Bug Localization with BERT},
	year = {2022},
	isbn = {9781450392211},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3510003.3510042},
	doi = {10.1145/3510003.3510042},
	abstract = {Automatically localizing software bugs to the changesets that induced them has the potential to improve software developer efficiency and to positively affect software quality. To facilitate this automation, a bug report has to be effectively matched with source code changes, even when a significant lexical gap exists between natural language used to describe the bug and identifier naming practices used by developers. To bridge this gap, we need techniques that are able to capture software engineering-specific and project-specific semantics in order to detect relatedness between the two types of documents that goes beyond exact term matching. Popular transformer-based deep learning architectures, such as BERT, excel at leveraging contextual information, hence appear to be a suitable candidate for the task. However, BERT-like models are computationally expensive, which precludes them from being used in an environment where response time is important.In this paper, we describe how BERT can be made fast enough to be applicable to changeset-based bug localization. We also explore several design decisions in using BERT for this purpose, including how best to encode changesets and how to match bug reports to individual changes for improved accuracy. We compare the accuracy and performance of our model to a non-contextual baseline (i.e., vector space model) and BERT-based architectures previously used in software engineering. Our evaluation results demonstrate advantages in using the proposed BERT model compared to the baselines, especially for bug reports that lack any hints about related code elements.},
	booktitle = {Proceedings of the 44th International Conference on Software Engineering},
	pages = {946–957},
	numpages = {12},
	keywords = {bug localization, information retrieval, BERT, changesets},
	location = {Pittsburgh, Pennsylvania},
	series = {ICSE '22}
}

@inproceedings{du2019leopard,
	author = {Du, Xiaoning and Chen, Bihuan and Li, Yuekang and Guo, Jianmin and Zhou, Yaqin and Liu, Yang and Jiang, Yu},
	title = {Leopard: Identifying Vulnerable Code for Vulnerability Assessment through Program Metrics},
	year = {2019},
	publisher = {IEEE Press},
	url = {https://doi.org/10.1109/ICSE.2019.00024},
	doi = {10.1109/ICSE.2019.00024},
	abstract = {Identifying potentially vulnerable locations in a code base is critical as a pre-step for effective vulnerability assessment; i.e., it can greatly help security experts put their time and effort to where it is needed most. Metric-based and pattern-based methods have been presented for identifying vulnerable code. The former relies on machine learning and cannot work well due to the severe imbalance between non-vulnerable and vulnerable code or lack of features to characterize vulnerabilities. The latter needs the prior knowledge of known vulnerabilities and can only identify similar but not new types of vulnerabilities.In this paper, we propose and implement a generic, lightweight and extensible framework, Leopard, to identify potentially vulnerable functions through program metrics. Leopard requires no prior knowledge about known vulnerabilities. It has two steps by combining two sets of systematically derived metrics. First, it uses complexity metrics to group the functions in a target application into a set of bins. Then, it uses vulnerability metrics to rank the functions in each bin and identifies the top ones as potentially vulnerable. Our experimental results on 11 real-world projects have demonstrated that, Leopard can cover 74.0\% of vulnerable functions by identifying 20\% of functions as vulnerable and outperform machine learning-based and static analysis-based techniques. We further propose three applications of Leopard for manual code review and fuzzing, through which we discovered 22 new bugs in real applications like PHP, radare2 and FFmpeg, and eight of them are new vulnerabilities.},
	booktitle = {Proceedings of the 41st International Conference on Software Engineering},
	pages = {60–71},
	numpages = {12},
	keywords = {fuzzing, vulnerability, program metric},
	location = {Montreal, Quebec, Canada},
	series = {ICSE '19}
}

@INPROCEEDINGS{moser2008defpred,
  author={Moser, Raimund and Pedrycz, Witold and Succi, Giancarlo},
  booktitle={2008 ACM/IEEE 30th International Conference on Software Engineering}, 
  title={A comparative analysis of the efficiency of change metrics and static code attributes for defect prediction}, 
  year={2008},
  volume={},
  number={},
  pages={181-190},
  doi={10.1145/1368088.1368114}
}

@INPROCEEDINGS{nagappan2010burst,
  author={Nagappan, Nachiappan and Zeller, Andreas and Zimmermann, Thomas and Herzig, Kim and Murphy, Brendan},
  booktitle={2010 IEEE 21st International Symposium on Software Reliability Engineering}, 
  title={Change Bursts as Defect Predictors}, 
  year={2010},
  volume={},
  number={},
  pages={309-318},
  doi={10.1109/ISSRE.2010.25}
}

@ARTICLE{hall2012defrev,
  author={Hall, Tracy and Beecham, Sarah and Bowes, David and Gray, David and Counsell, Steve},
  journal={IEEE Transactions on Software Engineering}, 
  title={A Systematic Literature Review on Fault Prediction Performance in Software Engineering}, 
  year={2012},
  volume={38},
  number={6},
  pages={1276-1304},
  doi={10.1109/TSE.2011.103}
}

@misc{ossfuzz,
  title = {{OSS}Fuzz},
  Howpublished = {\url{https://github.com/google/oss-fuzz}}
}

@misc{imagem,
  title = {{I}mage{M}agick},
  howpublished = {\url{https://github.com/ImageMagick/ImageMagick}}
}
